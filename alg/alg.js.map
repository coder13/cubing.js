{"mappings":"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","sources":["./src/alg/algorithm/alg-part.ts","./src/alg/debug.ts","./src/alg/algorithm/block-move.ts","./src/alg/operation.ts","./src/alg/traversal.ts","./src/alg/json.ts","./src/alg/parser/index.ts","./src/alg/validation.ts","./src/alg/parser/parser.pegjs","./src/alg/parser/parser.js","./src/alg/keyboard.ts","./src/alg/url.ts"],"sourcesContent":["import { reportTypeMismatch } from \"../debug\";\n\nexport type AlgPartType = string;\n\nexport abstract class AlgPart {\n  public abstract type: AlgPartType;\n}\n\n// type Constructor<T> = Function & { prototype: T }\nexport function matchesAlgType(a: any, t: AlgPartType): boolean {\n  return a.type === t;\n}\n\nexport function assertMatchesType<T extends AlgPart>(\n  a: any,\n  t: AlgPartType,\n): T {\n  if (!matchesAlgType(a, t)) {\n    reportTypeMismatch(`Expected \"type\": \"${t}\", saw \"type\": \"${a.type}\".`);\n  }\n  return a;\n}\n\n// Assumes that every `AlgPart` is a `Unit` or a `Sequence`.\nexport function isUnit(a: AlgPart): boolean {\n  if (!(\"type\" in a)) {\n    return false;\n  }\n  return !matchesAlgType(a, \"sequence\");\n}\n\nexport function assertIsUnit(a: AlgPart): Unit {\n  if (!(\"type\" in a)) {\n    reportTypeMismatch(`Expected \"unit\", saw a value that was not an AlgPart.`);\n  }\n  if (matchesAlgType(a, \"sequence\")) {\n    reportTypeMismatch(`Expected unit, saw \"sequence\".`);\n  }\n  return a;\n}\n\nexport abstract class Unit extends AlgPart {}\n\nexport abstract class Move extends Unit {}\nexport abstract class Annotation extends Unit {}\nexport abstract class Container extends Unit {}\n\n// TODO: Reintroduce an Algorithm class, and allow a mutable sequence too?\nexport class Sequence extends AlgPart {\n  public type: string = \"sequence\";\n  constructor(public nestedUnits: Unit[]) {\n    super();\n    for (const n of nestedUnits) {\n      assertIsUnit(n);\n    }\n    Object.freeze(this.nestedUnits);\n    Object.freeze(this);\n  }\n}\n\nexport interface WithAmount {\n  // TODO: Allow `amount` to be `undefined`, to distinguish between R and R1?\n  amount: number;\n}\nexport class Group extends Container implements WithAmount {\n  public type: string = \"group\";\n  constructor(public nestedSequence: Sequence, public amount: number = 1) {\n    super();\n    Object.freeze(this);\n  }\n}\nexport class Commutator extends Container implements WithAmount {\n  public type: string = \"commutator\";\n  constructor(\n    public A: Sequence,\n    public B: Sequence,\n    public amount: number = 1,\n  ) {\n    super();\n    Object.freeze(this);\n  }\n}\nexport class Conjugate extends Container implements WithAmount {\n  public type: string = \"conjugate\";\n  constructor(\n    public A: Sequence,\n    public B: Sequence,\n    public amount: number = 1,\n  ) {\n    super();\n    Object.freeze(this);\n  }\n}\nexport class Pause extends Move {\n  public type: string = \"pause\";\n  constructor() {\n    super();\n    Object.freeze(this);\n  }\n}\nexport class NewLine extends Annotation {\n  public type: string = \"newLine\";\n  constructor() {\n    super();\n    Object.freeze(this);\n  }\n}\n\n// TODO: must be followed by a newline, unless at the end of an alg?\nexport class Comment extends Annotation {\n  public type: string = \"comment\";\n  constructor(public comment: string) {\n    super();\n    Object.freeze(this);\n  }\n}\n\n// TODO\n// export class TimeStamp extends AlgPart implements AlgPart\n","type ReportingLevel = \"none\" | \"warn\" | \"error\";\nlet currentReportingLevel = \"warn\";\n\nconst MAX_NUMBER_OF_TIMES_TO_WARN = 10;\nlet numWarned = 0;\n\n// TODO: Avoid creating the string message if it won't be used (e.g. by taking a function?).\nexport function reportTypeMismatch(msg: string): void {\n  switch (currentReportingLevel) {\n    case \"error\":\n      throw new Error(msg);\n    case \"warn\":\n      numWarned++;\n      if (numWarned < MAX_NUMBER_OF_TIMES_TO_WARN) {\n        if (numWarned + 1 === MAX_NUMBER_OF_TIMES_TO_WARN) {\n          console.warn(msg);\n        }\n      }\n      return;\n  }\n}\n\nexport function setAlgPartTypeMismatchReportingLevel(\n  level: ReportingLevel,\n): void {\n  currentReportingLevel = level;\n}\n","import { Move } from \"./alg-part\";\n\nexport type MoveFamily = string; // TODO: Convert to an enum with string mappings.\n\n// TODO: Rename to `LetterMove`?\nexport class BlockMove extends Move {\n  public type: string = \"blockMove\";\n\n  // If `outerLayer` is set, `innerLayer` must also be set.\n  public outerLayer?: number;\n  public innerLayer?: number;\n  constructor(\n    outerLayer: number | undefined,\n    innerLayer: number | undefined,\n    public family: MoveFamily,\n    public amount: number = 1,\n  ) {\n    super();\n    if (innerLayer) {\n      this.innerLayer = innerLayer;\n      if (outerLayer) {\n        this.outerLayer = outerLayer;\n      }\n    }\n    if (outerLayer && !innerLayer) {\n      throw new Error(\n        \"Attempted to contruct block move with outer layer but no inner layer\",\n      );\n    }\n    Object.freeze(this);\n  }\n}\n\nexport function BareBlockMove(family: MoveFamily, amount?: number): BlockMove {\n  return new BlockMove(undefined, undefined, family, amount);\n}\n\nexport function LayerBlockMove(\n  innerLayer: number,\n  family: MoveFamily,\n  amount?: number,\n): BlockMove {\n  return new BlockMove(undefined, innerLayer, family, amount);\n}\n\nexport function RangeBlockMove(\n  outerLayer: number,\n  innerLayer: number,\n  family: MoveFamily,\n  amount?: number,\n): BlockMove {\n  return new BlockMove(outerLayer, innerLayer, family, amount);\n}\n","import { BlockMove, Sequence } from \"./algorithm\";\n\nfunction canCoalesce(m1: BlockMove, m2: BlockMove): boolean {\n  return (\n    m1.family === m2.family &&\n    m1.innerLayer === m2.innerLayer &&\n    m1.outerLayer === m2.outerLayer\n  );\n}\n\ninterface BlockMoveModifications {\n  outerLayer?: number;\n  innerLayer?: number;\n  family?: string;\n  amount?: number;\n}\n\nexport function modifiedBlockMove(\n  original: BlockMove,\n  modifications: BlockMoveModifications,\n): BlockMove {\n  // TODO: use the nullish coalescing operator once it becomes available to us.\n  return new BlockMove(\n    modifications.outerLayer ?? original.outerLayer,\n    modifications.innerLayer ?? original.innerLayer,\n    modifications.family ?? original.family,\n    modifications.amount ?? original.amount,\n  );\n}\n\nexport function experimentalAppendBlockMove(\n  s: Sequence,\n  newMove: BlockMove,\n  coalesceLastMove: boolean = false,\n  mod: number = 0,\n): Sequence {\n  const oldNestedUnits = s.nestedUnits;\n  const oldLastMove = oldNestedUnits[\n    oldNestedUnits.length - 1\n  ] as BlockMove | null;\n  if (coalesceLastMove && oldLastMove && canCoalesce(oldLastMove, newMove)) {\n    const newNestedUnits = s.nestedUnits.slice(0, oldNestedUnits.length - 1);\n    let newAmount = oldLastMove.amount + newMove.amount;\n    if (mod > 1) {\n      newAmount = ((newAmount % mod) + mod) % mod;\n      if (newAmount * 2 > mod) {\n        newAmount -= mod;\n      }\n    }\n    if (newAmount !== 0) {\n      newNestedUnits.push(\n        modifiedBlockMove(oldLastMove, { amount: newAmount }),\n      );\n    }\n    return new Sequence(newNestedUnits);\n  } else {\n    return new Sequence([...oldNestedUnits, newMove]);\n  }\n}\n\n// This purposely takes sequences as individual arguments, instead of a lsit of sequences, because:\n//\n// 1. This matches Javascript's built-in `Array.concat()` functionality.\n// 2. It encourages avoiding lists of sequences (which might lead to coding mistakes).\n//\n// TODO: Now useful is it to coalesce at alg boundaries (rather than coalescing the whole result)?\n// Should that be a separate function, or should we change this to accept coalescing option arg like `experimentalAppendBlockMove()`?\nexport function experimentalConcatAlgs(...args: Sequence[]): Sequence {\n  return new Sequence(\n    Array.prototype.concat.apply(\n      [],\n      [...args].map((s) => s.nestedUnits),\n    ),\n  );\n}\n","import {\n  assertIsUnit,\n  assertMatchesType,\n  isUnit,\n  matchesAlgType,\n} from \"./algorithm/alg-part\";\n\nimport {\n  AlgPart,\n  BlockMove,\n  Comment,\n  Commutator,\n  Conjugate,\n  Group,\n  NewLine,\n  Pause,\n  Sequence,\n  Unit,\n  WithAmount,\n} from \"./algorithm\";\n\nfunction dispatch<DataDown, DataUp>(\n  t: TraversalDownUp<DataDown, DataUp>,\n  algPart: AlgPart,\n  dataDown: DataDown,\n): DataUp {\n  switch (algPart.type) {\n    case \"sequence\":\n      assertMatchesType(algPart, \"sequence\");\n      return t.traverseSequence(algPart as Sequence, dataDown);\n    case \"group\":\n      assertMatchesType(algPart, \"group\");\n      return t.traverseGroup(algPart as Group, dataDown);\n    case \"blockMove\":\n      assertMatchesType(algPart, \"blockMove\");\n      return t.traverseBlockMove(algPart as BlockMove, dataDown);\n    case \"commutator\":\n      assertMatchesType(algPart, \"commutator\");\n      return t.traverseCommutator(algPart as Commutator, dataDown);\n    case \"conjugate\":\n      assertMatchesType(algPart, \"conjugate\");\n      return t.traverseConjugate(algPart as Conjugate, dataDown);\n    case \"pause\":\n      assertMatchesType(algPart, \"pause\");\n      return t.traversePause(algPart as Pause, dataDown);\n    case \"newLine\":\n      assertMatchesType(algPart, \"newLine\");\n      return t.traverseNewLine(algPart as NewLine, dataDown);\n    case \"comment\":\n      assertMatchesType(algPart, \"comment\");\n      return t.traverseComment(algPart as Comment, dataDown);\n    default:\n      throw new Error(`Unknown AlgPart type: ${algPart.type}`);\n  }\n}\n\nexport abstract class TraversalDownUp<DataDown, DataUp> {\n  // Immediate subclasses should overwrite this.\n  public traverse(algPart: AlgPart, dataDown: DataDown): DataUp {\n    return dispatch(this, algPart, dataDown);\n  }\n\n  public traverseIntoUnit(algPart: AlgPart, dataDown: DataDown): Unit {\n    return assertIsUnit(this.traverse(algPart, dataDown) as any);\n  }\n\n  public abstract traverseSequence(\n    sequence: Sequence,\n    dataDown: DataDown,\n  ): DataUp;\n\n  public abstract traverseGroup(group: Group, dataDown: DataDown): DataUp;\n  public abstract traverseBlockMove(\n    blockMove: BlockMove,\n    dataDown: DataDown,\n  ): DataUp;\n\n  public abstract traverseCommutator(\n    commutator: Commutator,\n    dataDown: DataDown,\n  ): DataUp;\n\n  public abstract traverseConjugate(\n    conjugate: Conjugate,\n    dataDown: DataDown,\n  ): DataUp;\n\n  public abstract traversePause(pause: Pause, dataDown: DataDown): DataUp;\n  public abstract traverseNewLine(newLine: NewLine, dataDown: DataDown): DataUp;\n  public abstract traverseComment(comment: Comment, dataDown: DataDown): DataUp;\n}\n\nexport abstract class TraversalUp<DataUp> extends TraversalDownUp<\n  undefined,\n  DataUp\n> {\n  public traverse(algPart: AlgPart): DataUp {\n    return dispatch<undefined, DataUp>(this, algPart, undefined);\n  }\n\n  public traverseIntoUnit(algPart: AlgPart): Unit {\n    return assertIsUnit(this.traverse(algPart) as any);\n  }\n\n  public abstract traverseSequence(sequence: Sequence): DataUp;\n  public abstract traverseGroup(group: Group): DataUp;\n  public abstract traverseBlockMove(blockMove: BlockMove): DataUp;\n  public abstract traverseCommutator(commutator: Commutator): DataUp;\n  public abstract traverseConjugate(conjugate: Conjugate): DataUp;\n  public abstract traversePause(pause: Pause): DataUp;\n  public abstract traverseNewLine(newLine: NewLine): DataUp;\n  public abstract traverseComment(comment: Comment): DataUp;\n}\n\n// TODO: Test that inverses are bijections.\nexport class Invert extends TraversalUp<AlgPart> {\n  public traverseSequence(sequence: Sequence): Sequence {\n    // TODO: Handle newLines and comments correctly\n    return new Sequence(\n      sequence.nestedUnits.map((a) => this.traverseIntoUnit(a)).reverse(),\n    );\n  }\n\n  public traverseGroup(group: Group): AlgPart {\n    return new Group(this.traverseSequence(group.nestedSequence), group.amount);\n  }\n\n  public traverseBlockMove(blockMove: BlockMove): AlgPart {\n    return new BlockMove(\n      blockMove.outerLayer,\n      blockMove.innerLayer,\n      blockMove.family,\n      -blockMove.amount,\n    );\n  }\n\n  public traverseCommutator(commutator: Commutator): AlgPart {\n    return new Commutator(commutator.B, commutator.A, commutator.amount);\n  }\n\n  public traverseConjugate(conjugate: Conjugate): AlgPart {\n    return new Conjugate(\n      conjugate.A,\n      this.traverseSequence(conjugate.B),\n      conjugate.amount,\n    );\n  }\n\n  public traversePause(pause: Pause): AlgPart {\n    return pause;\n  }\n\n  public traverseNewLine(newLine: NewLine): AlgPart {\n    return newLine;\n  }\n\n  public traverseComment(comment: Comment): AlgPart {\n    return comment;\n  }\n}\n\nexport class Expand extends TraversalUp<AlgPart> {\n  public traverseSequence(sequence: Sequence): Sequence {\n    return new Sequence(\n      this.flattenSequenceOneLevel(\n        sequence.nestedUnits.map((a) => this.traverse(a)),\n      ),\n    );\n  }\n\n  public traverseGroup(group: Group): AlgPart {\n    // TODO: Pass raw AlgPart[] to sequence.\n    return this.repeat(\n      this.flattenSequenceOneLevel([this.traverse(group.nestedSequence)]),\n      group,\n    );\n  }\n\n  public traverseBlockMove(blockMove: BlockMove): AlgPart {\n    return blockMove;\n  }\n\n  public traverseCommutator(commutator: Commutator): AlgPart {\n    const expandedA = this.traverseSequence(commutator.A);\n    const expandedB = this.traverseSequence(commutator.B);\n    let once: AlgPart[] = [];\n    once = once.concat(\n      expandedA,\n      expandedB,\n      invert(expandedA),\n      invert(expandedB),\n    );\n    return this.repeat(this.flattenSequenceOneLevel(once), commutator);\n  }\n\n  public traverseConjugate(conjugate: Conjugate): AlgPart {\n    const expandedA = this.traverseSequence(conjugate.A);\n    const expandedB = this.traverseSequence(conjugate.B);\n    let once: AlgPart[] = [];\n    once = once.concat(expandedA, expandedB, invert(expandedA));\n    return this.repeat(this.flattenSequenceOneLevel(once), conjugate);\n  }\n\n  public traversePause(pause: Pause): AlgPart {\n    return pause;\n  }\n\n  public traverseNewLine(newLine: NewLine): AlgPart {\n    return newLine;\n  }\n\n  public traverseComment(comment: Comment): AlgPart {\n    return comment;\n  }\n\n  private flattenSequenceOneLevel(algList: AlgPart[]): Unit[] {\n    let flattened: Unit[] = [];\n    for (const part of algList) {\n      if (matchesAlgType(part, \"sequence\")) {\n        flattened = flattened.concat((part as Sequence).nestedUnits);\n      } else if (isUnit(part)) {\n        flattened.push(part);\n      } else {\n        throw new Error(\n          \"expand() encountered an internal error. Did you pass in a valid Algorithm?\",\n        );\n      }\n    }\n    return flattened;\n  }\n\n  private repeat(algList: Unit[], accordingTo: WithAmount): Sequence {\n    const amount = Math.abs(accordingTo.amount);\n    const amountDir = accordingTo.amount > 0 ? 1 : -1; // Mutable\n\n    // TODO: Cleaner inversion\n    let once: Unit[];\n    if (amountDir === -1) {\n      // TODO: Avoid casting to sequence.\n      once = (invert(new Sequence(algList)) as Sequence).nestedUnits;\n    } else {\n      once = algList;\n    }\n\n    let repeated: Unit[] = [];\n    for (let i = 0; i < amount; i++) {\n      repeated = repeated.concat(once);\n    }\n\n    return new Sequence(repeated);\n  }\n}\n\nexport class StructureEquals extends TraversalDownUp<AlgPart, boolean> {\n  public traverseSequence(sequence: Sequence, dataDown: AlgPart): boolean {\n    if (isUnit(dataDown)) {\n      return false;\n    }\n    const dataDownSeq = dataDown as Sequence;\n    if (sequence.nestedUnits.length !== dataDownSeq.nestedUnits.length) {\n      return false;\n    }\n    for (let i = 0; i < sequence.nestedUnits.length; i++) {\n      if (!this.traverse(sequence.nestedUnits[i], dataDownSeq.nestedUnits[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public traverseGroup(group: Group, dataDown: AlgPart): boolean {\n    return (\n      matchesAlgType(dataDown, \"group\") &&\n      this.traverse(group.nestedSequence, (dataDown as Group).nestedSequence)\n    );\n  }\n\n  public traverseBlockMove(blockMove: BlockMove, dataDown: AlgPart): boolean {\n    // TODO: Handle layers.\n    return (\n      matchesAlgType(dataDown, \"blockMove\") &&\n      blockMove.outerLayer === (dataDown as BlockMove).outerLayer &&\n      blockMove.innerLayer === (dataDown as BlockMove).innerLayer &&\n      blockMove.family === (dataDown as BlockMove).family &&\n      blockMove.amount === (dataDown as BlockMove).amount\n    );\n  }\n\n  public traverseCommutator(\n    commutator: Commutator,\n    dataDown: AlgPart,\n  ): boolean {\n    return (\n      matchesAlgType(dataDown, \"commutator\") &&\n      this.traverse(commutator.A, (dataDown as Commutator).A) &&\n      this.traverse(commutator.B, (dataDown as Commutator).B)\n    );\n  }\n\n  public traverseConjugate(conjugate: Conjugate, dataDown: AlgPart): boolean {\n    return (\n      matchesAlgType(dataDown, \"conjugate\") &&\n      this.traverse(conjugate.A, (dataDown as Conjugate).A) &&\n      this.traverse(conjugate.B, (dataDown as Conjugate).B)\n    );\n  }\n\n  public traversePause(_pause: Pause, dataDown: AlgPart): boolean {\n    return matchesAlgType(dataDown, \"pause\");\n  }\n\n  public traverseNewLine(_newLine: NewLine, dataDown: AlgPart): boolean {\n    return matchesAlgType(dataDown, \"newLine\");\n  }\n\n  public traverseComment(comment: Comment, dataDown: AlgPart): boolean {\n    return (\n      matchesAlgType(dataDown, \"comment\") &&\n      comment.comment === (dataDown as Comment).comment\n    );\n  }\n}\n\n// TODO: Test that inverses are bijections.\nexport class CoalesceBaseMoves extends TraversalUp<AlgPart> {\n  // TODO: Handle\n  public traverseSequence(sequence: Sequence): Sequence {\n    const coalesced: Unit[] = [];\n    for (const part of sequence.nestedUnits) {\n      if (!matchesAlgType(part, \"blockMove\")) {\n        coalesced.push(this.traverseIntoUnit(part));\n      } else if (coalesced.length > 0) {\n        const last = coalesced[coalesced.length - 1];\n        if (\n          matchesAlgType(last, \"blockMove\") &&\n          this.sameBlock(last as BlockMove, part as BlockMove)\n        ) {\n          // TODO: This is cube-specific. Perhaps pass the modules as DataDown?\n          const amount =\n            (last as BlockMove).amount + (part as BlockMove).amount;\n          coalesced.pop();\n          if (amount !== 0) {\n            // We could modify the last element instead of creating a new one,\n            // but this is safe against shifting coding practices.\n            // TODO: Figure out if the shoot-in-the-foot risk\n            // modification is worth the speed.\n            coalesced.push(\n              new BlockMove(\n                (part as BlockMove).outerLayer,\n                (part as BlockMove).innerLayer,\n                (part as BlockMove).family,\n                amount,\n              ),\n            );\n          }\n        } else {\n          coalesced.push(part);\n        }\n      } else {\n        coalesced.push(part);\n      }\n    }\n    return new Sequence(coalesced);\n  }\n\n  public traverseGroup(group: Group): AlgPart {\n    return group;\n  }\n\n  public traverseBlockMove(blockMove: BlockMove): AlgPart {\n    return blockMove;\n  }\n\n  public traverseCommutator(commutator: Commutator): AlgPart {\n    return commutator;\n  }\n\n  public traverseConjugate(conjugate: Conjugate): AlgPart {\n    return conjugate;\n  }\n\n  public traversePause(pause: Pause): AlgPart {\n    return pause;\n  }\n\n  public traverseNewLine(newLine: NewLine): AlgPart {\n    return newLine;\n  }\n\n  public traverseComment(comment: Comment): AlgPart {\n    return comment;\n  }\n\n  private sameBlock(moveA: BlockMove, moveB: BlockMove): boolean {\n    // TODO: Handle layers\n    return (\n      moveA.outerLayer === moveB.outerLayer &&\n      moveA.innerLayer === moveB.innerLayer &&\n      moveA.family === moveB.family\n    );\n  }\n}\n\n// export class Concat extends TraversalDownUp<Algorithm, Sequence> {\n//   private concatIntoSequence(A: Unit[], B: Algorithm): Sequence {\n//     var nestedAlgs: Unit[] = A.slice();\n//     if (matchesAlgType(B, \"sequence\")) {\n//       nestedAlgs = nestedAlgs.concat((B as unknown as Sequence).nestedUnits)\n//     } else {\n//       nestedAlgs.push(B as unknown as Unit);\n//     }\n//     return new Sequence(nestedAlgs)\n//   }\n//   public traverseSequence(     sequence:     Sequence,     dataDown: Algorithm): Sequence {return this.concatIntoSequence(sequence.nestedUnits, dataDown); }\n//   public traverseGroup(        group:        Group,        dataDown: Algorithm): Sequence {return this.concatIntoSequence([group]          , dataDown); }\n//   public traverseBlockMove(    BlockMove:    BlockMove,    dataDown: Algorithm): Sequence {return this.concatIntoSequence([BlockMove]      , dataDown); }\n//   public traverseCommutator(   commutator:   Commutator,   dataDown: Algorithm): Sequence {return this.concatIntoSequence([commutator]     , dataDown); }\n//   public traverseConjugate(    conjugate:    Conjugate,    dataDown: Algorithm): Sequence {return this.concatIntoSequence([conjugate]      , dataDown); }\n//   public traversePause(        pause:        Pause,        dataDown: Algorithm): Sequence {return this.concatIntoSequence([pause]          , dataDown); }\n//   public traverseNewLine(      newLine:      NewLine,      dataDown: Algorithm): Sequence {return this.concatIntoSequence([newLine]        , dataDown); }\n//   public traverseComment( comment: Comment, dataDown: Algorithm): Sequence {return this.concatIntoSequence([comment]   , dataDown); }\n// }\n\nfunction repetitionSuffix(amount: number): string {\n  const absAmount = Math.abs(amount);\n  let s = \"\";\n  if (absAmount !== 1) {\n    s += String(absAmount);\n  }\n  if (absAmount !== amount) {\n    s += \"'\";\n  }\n  return s;\n}\nexport function blockMoveToString(blockMove: BlockMove): string {\n  let out = blockMove.family + repetitionSuffix(blockMove.amount);\n  if (typeof blockMove.innerLayer !== \"undefined\") {\n    out = String(blockMove.innerLayer) + out;\n    if (typeof blockMove.outerLayer !== \"undefined\") {\n      out = String(blockMove.outerLayer) + \"-\" + out;\n    }\n  }\n  return out;\n}\n\nexport class ToString extends TraversalUp<string> {\n  public traverseSequence(sequence: Sequence): string {\n    let output = \"\";\n    if (sequence.nestedUnits.length > 0) {\n      output += this.traverse(sequence.nestedUnits[0]);\n      for (let i = 1; i < sequence.nestedUnits.length; i++) {\n        output += this.spaceBetween(\n          sequence.nestedUnits[i - 1],\n          sequence.nestedUnits[i],\n        );\n        output += this.traverse(sequence.nestedUnits[i]);\n      }\n    }\n    return output;\n  }\n\n  public traverseGroup(group: Group): string {\n    return (\n      \"(\" +\n      this.traverse(group.nestedSequence) +\n      \")\" +\n      repetitionSuffix(group.amount)\n    );\n  }\n\n  public traverseBlockMove(blockMove: BlockMove): string {\n    return blockMoveToString(blockMove);\n  }\n\n  public traverseCommutator(commutator: Commutator): string {\n    return (\n      \"[\" +\n      this.traverse(commutator.A) +\n      \", \" +\n      this.traverse(commutator.B) +\n      \"]\" +\n      repetitionSuffix(commutator.amount)\n    );\n  }\n\n  public traverseConjugate(conjugate: Conjugate): string {\n    return (\n      \"[\" +\n      this.traverse(conjugate.A) +\n      \": \" +\n      this.traverse(conjugate.B) +\n      \"]\" +\n      repetitionSuffix(conjugate.amount)\n    );\n  }\n\n  // TODO: Remove spaces between repeated pauses (in traverseSequence)\n  public traversePause(_pause: Pause): string {\n    return \".\";\n  }\n\n  public traverseNewLine(_newLine: NewLine): string {\n    return \"\\n\";\n  }\n\n  // TODO: Enforce being followed by a newline (or the end of the alg)?\n  public traverseComment(comment: Comment): string {\n    return \"//\" + comment.comment;\n  }\n\n  // TODO: Sanitize `*/`\n  private spaceBetween(u1: Unit, u2: Unit): string {\n    if (matchesAlgType(u1, \"pause\") && matchesAlgType(u2, \"pause\")) {\n      return \"\";\n    }\n    if (matchesAlgType(u1, \"newLine\") || matchesAlgType(u2, \"newLine\")) {\n      return \"\";\n    }\n    if (matchesAlgType(u1, \"comment\") && !matchesAlgType(u2, \"newLine\")) {\n      return \"\\n\";\n    }\n    return \" \";\n  }\n}\n\nconst invertInstance = new Invert();\nconst expandInstance = new Expand();\nconst structureEqualsInstance = new StructureEquals();\nconst coalesceBaseMovesInstance = new CoalesceBaseMoves();\nconst algToStringInstance = new ToString();\n\nexport const invert = invertInstance.traverseSequence.bind(invertInstance) as (\n  a: Sequence,\n) => Sequence;\nexport const expand = expandInstance.traverseSequence.bind(expandInstance) as (\n  a: Sequence,\n) => Sequence;\nexport const structureEquals = structureEqualsInstance.traverseSequence.bind(\n  structureEqualsInstance,\n) as (a1: Sequence, a2: Sequence) => boolean;\nexport const coalesceBaseMoves = coalesceBaseMovesInstance.traverseSequence.bind(\n  coalesceBaseMovesInstance,\n) as (a: Sequence) => Sequence;\nexport const algToString = algToStringInstance.traverseSequence.bind(\n  algToStringInstance,\n) as (a: Sequence) => string;\n\nexport const algPartStructureEqualsForTesting = algToStringInstance.traverse.bind(\n  algToStringInstance,\n) as (a1: AlgPart, a2: AlgPart) => boolean;\nexport const algPartToStringForTesting = algToStringInstance.traverse.bind(\n  algToStringInstance,\n) as (a: AlgPart) => string;\n\nexport function experimentalBlockMoveQuantumName(move: BlockMove): string {\n  return algPartToStringForTesting(\n    new BlockMove(move.outerLayer, move.innerLayer, move.family, 1),\n  );\n}\n","import {\n  BlockMove,\n  Comment,\n  Commutator,\n  Conjugate,\n  Group,\n  NewLine,\n  Pause,\n  Sequence,\n  Unit,\n} from \"./algorithm\";\n\n// TODO: Turn this into a union.\nexport interface AlgJSON {\n  type: string;\n  nestedSequence?: AlgJSON;\n  nestedUnits?: AlgJSON[];\n  innerLayer?: number;\n  outerLayer?: number;\n  family?: string;\n  amount?: number;\n  A?: AlgJSON;\n  B?: AlgJSON;\n  comment?: string;\n}\n\nexport function fromJSON(json: AlgJSON): Sequence {\n  if (json.type !== \"sequence\") {\n    throw new Error(`Expected Sequence while parsing, got: ${json.type}`);\n  }\n  if (!json.nestedUnits) {\n    throw new Error(\"Missing nestedUnits\");\n  }\n  return new Sequence(json.nestedUnits.map((j) => unitFromJSON(j)));\n}\n\nfunction unitFromJSON(json: AlgJSON): Unit {\n  switch (json.type) {\n    case \"sequence\":\n      throw new Error(`Expected AlgPart while parsing, got \\`Sequence\\`.`);\n    case \"group\":\n      if (!json.nestedSequence) {\n        throw new Error(\"Missing nestedSequence\");\n      }\n      if (!json.amount) {\n        throw new Error(\"Missing amount\");\n      }\n      return new Group(fromJSON(json.nestedSequence), json.amount);\n    case \"blockMove\":\n      // TODO: Double-check that there is no outer layer without an inner layer?\n      if (!json.family) {\n        throw new Error(\"Missing family\");\n      }\n      if (!json.amount) {\n        throw new Error(\"Missing amount\");\n      }\n      return new BlockMove(\n        json.outerLayer,\n        json.innerLayer,\n        json.family,\n        json.amount,\n      );\n    case \"commutator\":\n      if (!json.A) {\n        throw new Error(\"Missing A\");\n      }\n      if (!json.B) {\n        throw new Error(\"Missing B\");\n      }\n      if (!json.amount) {\n        throw new Error(\"Missing amount\");\n      }\n      return new Commutator(fromJSON(json.A), fromJSON(json.B), json.amount);\n    case \"conjugate\":\n      if (!json.A) {\n        throw new Error(\"Missing A\");\n      }\n      if (!json.B) {\n        throw new Error(\"Missing B\");\n      }\n      if (!json.amount) {\n        throw new Error(\"Missing amount\");\n      }\n      return new Conjugate(fromJSON(json.A), fromJSON(json.B), json.amount);\n    case \"pause\":\n      return new Pause();\n    case \"newLine\":\n      return new NewLine();\n    case \"comment\":\n      // The empty string is nullish, so we check for it separately.\n      if (!json.comment && json.comment !== \"\") {\n        throw new Error(\"Missing comment\");\n      }\n      return new Comment(json.comment);\n    default:\n      throw new Error(`Unknown alg type: ${json.type}`);\n  }\n}\n","import { Sequence } from \"../algorithm\";\nimport { fromJSON } from \"../json\";\nimport { validateSiGNAlg, Validator } from \"../validation\";\nimport { parse as pegParse } from \"./parser\";\n\nexport interface ParseOptions {\n  validators?: Validator[];\n}\n\n// TODO: Include token location info.\n// TODO: Take validators in a way that allows optimizing parsing.\nexport function parse(\n  s: string,\n  options: ParseOptions = { validators: [] },\n): Sequence {\n  options.validators = options.validators || [];\n\n  const algo = fromJSON(pegParse(s));\n  for (const validate of options.validators) {\n    validate(algo);\n  }\n  return algo;\n}\n\nexport function parseSiGN(s: string): Sequence {\n  return parse(s, { validators: [validateSiGNAlg] });\n}\n","import {\n  BlockMove,\n  Comment,\n  Commutator,\n  Conjugate,\n  Group,\n  NewLine,\n  Pause,\n  Sequence,\n} from \"./algorithm\";\n\nimport { TraversalUp } from \"./traversal\";\n\nexport class ValidationError extends Error {}\n\nexport abstract class ValidatorTraversal extends TraversalUp<void> {}\n\ninterface FamilyList {\n  [s: string]: boolean;\n}\n\nfunction validateFamily(\n  family: string,\n  allowedFamilyLists: FamilyList[],\n): boolean {\n  for (const list of allowedFamilyLists) {\n    if (list[family] === true) {\n      return true;\n    }\n  }\n  return false;\n}\n\n// TODO: Switch to `Set`?\nconst plainMoveFamilies: FamilyList = {\n  x: true,\n  y: true,\n  z: true,\n  M: true,\n  E: true,\n  S: true,\n  m: true,\n  e: true,\n  s: true,\n};\n\nconst singleSliceMoveFamilies: FamilyList = {\n  U: true,\n  L: true,\n  F: true,\n  R: true,\n  B: true,\n  D: true,\n};\n\nconst wideMoveFamilies: FamilyList = {\n  u: true,\n  l: true,\n  f: true,\n  r: true,\n  b: true,\n  d: true,\n  Uw: true,\n  Lw: true,\n  Fw: true,\n  Rw: true,\n  Bw: true,\n  Dw: true,\n};\n\nabstract class BaseMoveValidator extends ValidatorTraversal {\n  public traverseSequence(sequence: Sequence): void {\n    // TODO: Handle newLines and comments correctly\n    for (const unit of sequence.nestedUnits) {\n      this.traverse(unit);\n    }\n  }\n\n  public traverseGroup(group: Group): void {\n    return this.traverse(group.nestedSequence);\n  }\n\n  public traverseCommutator(commutator: Commutator): void {\n    this.traverse(commutator.A);\n    this.traverse(commutator.B);\n  }\n\n  public traverseConjugate(conjugate: Conjugate): void {\n    this.traverse(conjugate.A);\n    this.traverse(conjugate.B);\n  }\n\n  public traversePause(_pause: Pause): void {\n    return;\n  }\n\n  public traverseNewLine(_newLine: NewLine): void {\n    return;\n  }\n\n  public traverseComment(_comment: Comment): void {\n    return;\n  }\n}\n\n// TODO: Export function instead?\nexport class BlockMoveValidator extends BaseMoveValidator {\n  public traverseBlockMove(blockMove: BlockMove): void {\n    if (typeof blockMove.outerLayer !== \"undefined\") {\n      if (typeof blockMove.innerLayer === \"undefined\") {\n        throw new ValidationError(\n          \"A BlockMove with an outer layer must have an inner layer.\",\n        );\n      }\n      if (!validateFamily(blockMove.family, [wideMoveFamilies])) {\n        throw new ValidationError(\n          `The provided SiGN move family is invalid, or cannot have an outer and inner layer: ${blockMove.family}`,\n        );\n      }\n      if (blockMove.outerLayer <= 0) {\n        throw new ValidationError(\"Cannot have an outer layer of 0 or less.\");\n      }\n      // TODO: Allow 2-2r?\n      if (blockMove.outerLayer >= blockMove.innerLayer) {\n        throw new ValidationError(\n          \"The outer layer must be less than the inner layer.\",\n        );\n      }\n      return;\n    } else if (typeof blockMove.innerLayer !== \"undefined\") {\n      if (\n        !validateFamily(blockMove.family, [\n          wideMoveFamilies,\n          singleSliceMoveFamilies,\n        ])\n      ) {\n        throw new ValidationError(\n          `The provided SiGN move family is invalid, or cannot have an inner slice: ${blockMove.family}`,\n        );\n      }\n      if (blockMove.innerLayer <= 0) {\n        throw new ValidationError(\"Cannot have an inner layer of 0 or less.\");\n      }\n      return;\n    } else {\n      if (\n        !validateFamily(blockMove.family, [\n          wideMoveFamilies,\n          singleSliceMoveFamilies,\n          plainMoveFamilies,\n        ])\n      ) {\n        throw new ValidationError(\n          `Invalid SiGN plain move family: ${blockMove.family}`,\n        );\n      }\n      return;\n    }\n  }\n}\n\n// TODO: Export function instead?\nexport class FlatAlgValidator extends ValidatorTraversal {\n  public traverseSequence(sequence: Sequence): void {\n    // TODO: Handle newLines and comments correctly\n    for (const unit of sequence.nestedUnits) {\n      this.traverse(unit);\n    }\n    return;\n  }\n\n  public traverseGroup(_group: Group): void {\n    throw new ValidationError(\"A flat alg cannot contain a group.\");\n  }\n\n  public traverseBlockMove(_blockMove: BlockMove): void {\n    return;\n  }\n\n  public traverseCommutator(_commutator: Commutator): void {\n    throw new ValidationError(\"A flat alg cannot contain a commutator.\");\n  }\n\n  public traverseConjugate(_conjugate: Conjugate): void {\n    throw new ValidationError(\"A flat alg cannot contain a conjugate.\");\n  }\n\n  public traversePause(_pause: Pause): void {\n    return;\n  }\n\n  public traverseNewLine(_newLine: NewLine): void {\n    return;\n  }\n\n  public traverseComment(_comment: Comment): void {\n    return;\n  }\n}\n\nexport type Validator = (a: Sequence) => void;\n\nconst BlockMoveValidatorInstance = new BlockMoveValidator();\nexport const validateSiGNMoves = BlockMoveValidatorInstance.traverse.bind(\n  BlockMoveValidatorInstance,\n) as Validator;\n\nconst flatAlgValidatorInstance = new FlatAlgValidator();\nexport const validateFlatAlg = flatAlgValidatorInstance.traverse.bind(\n  flatAlgValidatorInstance,\n) as Validator;\n\n// TODO: Option for puzzle size?\nexport function validateSiGNAlg(a: Sequence): void {\n  validateSiGNMoves(a);\n  validateFlatAlg(a);\n}\n","start = SEQUENCE\n\nNUMBER = characters:[0-9]+ { return parseInt(characters.join(\"\"), 10); }\n\nAMOUNT = repetition:NUMBER \"'\" { return -repetition; }\n       / NUMBER\n       / \"'\" { return -1; }\n\nFAMILY = characters:[_A-Za-z]+ { return characters.join(\"\"); }\nBLOCK_MOVE = family:FAMILY { return {type: \"blockMove\", family: family}; }\n           / innerLayer:NUMBER family:FAMILY { return {type: \"blockMove\", family: family, innerLayer: innerLayer}; }\n           / outerLayer:NUMBER \"-\" innerLayer:NUMBER family:FAMILY { return {type: \"blockMove\", family: family, outerLayer: outerLayer, innerLayer: innerLayer}; }\n\nREPEATABLE_UNIT = BLOCK_MOVE\n                // We parse commutators/conjugates together to reduce branching.\n                / \"[\" a:SEQUENCE separator:[,:] b:SEQUENCE \"]\" { return {\"type\": separator === \",\" ? \"commutator\" : \"conjugate\", \"A\": a, \"B\": b}; }\n                / \"(\" nestedSequence:SEQUENCE \")\" { return {\"type\": \"group\", \"nestedSequence\": nestedSequence}; }\n\nREPEATED_UNIT = repeatable_unit:REPEATABLE_UNIT amount:AMOUNT { repeatable_unit.amount = amount; return repeatable_unit; }\n              / repeatable_unit:REPEATABLE_UNIT { repeatable_unit.amount = 1; return repeatable_unit; }\n\nCOMMENT = \"//\" body:[^\\n\\r]* { return {type: \"comment\", comment: body.join(\"\")}; }\n\nANNOTATION = [\\n\\r] { return {\"type\": \"newLine\"}; }\n           / \".\" { return {\"type\": \"pause\"}; }\n           / COMMENT\n\nSEGMENT_PART = REPEATED_UNIT\n             / ANNOTATION\n\nSEGMENT = segment_part:SEGMENT_PART segment:SEGMENT { return [segment_part].concat(segment); }\n        / segment_part:SEGMENT_PART { return [segment_part]; }\n\nUNIT_LIST = segment:SEGMENT [ ]+ unit_list:UNIT_LIST { return segment.concat(unit_list); }\n          / SEGMENT\n\nSEQUENCE = [ ]* unit_list:UNIT_LIST [ ]* { return {\"type\": \"sequence\", \"nestedUnits\": unit_list}; }\n         / [ ]* { return {\"type\": \"sequence\", \"nestedUnits\": []}; }\n","// Workaround per https://github.com/pegjs/pegjs/pull/481\nimport parser from \"./parser.pegjs\";\nconst { parse } = parser;\nexport { parse };\n","import { BareBlockMove, BlockMove } from \"./algorithm\";\n\nconst cubeKeyMapping: { [key: number]: BlockMove } = {\n  73: BareBlockMove(\"R\"),\n  75: BareBlockMove(\"R\", -1),\n  87: BareBlockMove(\"B\"),\n  79: BareBlockMove(\"B\", -1),\n  83: BareBlockMove(\"D\"),\n  76: BareBlockMove(\"D\", -1),\n  68: BareBlockMove(\"L\"),\n  69: BareBlockMove(\"L\", -1),\n  74: BareBlockMove(\"U\"),\n  70: BareBlockMove(\"U\", -1),\n  72: BareBlockMove(\"F\"),\n  71: BareBlockMove(\"F\", -1),\n\n  78: BareBlockMove(\"x\", -1),\n  67: BareBlockMove(\"l\"),\n  82: BareBlockMove(\"l\", -1),\n  85: BareBlockMove(\"r\"),\n  77: BareBlockMove(\"r\", -1),\n\n  88: BareBlockMove(\"d\", 1),\n  188: BareBlockMove(\"d\", -1),\n\n  84: BareBlockMove(\"x\"),\n  89: BareBlockMove(\"x\"),\n  66: BareBlockMove(\"x\", -1),\n  186: BareBlockMove(\"y\"),\n  59: BareBlockMove(\"y\"),\n  65: BareBlockMove(\"y\", -1), // 186 is WebKit, 59 is Mozilla; see http://unixpapa.com/js/key.html\n  80: BareBlockMove(\"z\"),\n  81: BareBlockMove(\"z\", -1),\n\n  90: BareBlockMove(\"M\", -1),\n  190: BareBlockMove(\"M\", -1),\n};\n\n// TODO: options about whether to ignore modifier keys (e.g. alt, ctrl).\n// TODO: Support different mappings.\n// TODO: Return BaseMove instead?\nexport function keyToMove(e: KeyboardEvent): BlockMove | null {\n  if (e.altKey || e.ctrlKey) {\n    return null;\n  }\n\n  return cubeKeyMapping[e.keyCode] || null;\n}\n","import { Sequence } from \"./algorithm\";\nimport { parse } from \"./parser\";\nimport { algToString } from \"./traversal\";\n\n// This is not the most sophisticated scheme, but it has been used in production\n// at alg.cubing.net for years.\nexport function serializeURLParam(a: Sequence): string {\n  let escaped = algToString(a);\n  escaped = escaped.replace(/_/g, \"&#95;\").replace(/ /g, \"_\");\n  escaped = escaped.replace(/\\+/g, \"&#2b;\");\n  escaped = escaped.replace(/-/g, \"&#45;\").replace(/'/g, \"-\");\n  return escaped;\n}\n\nexport function deserializeURLParam(a: string): Sequence {\n  let unescaped = a;\n  unescaped = unescaped.replace(/-/g, \"'\").replace(/&#45;/g, \"-\");\n  unescaped = unescaped.replace(/\\+/g, \" \").replace(/&#2b;/g, \"+\"); // Recognize + as space. Many URL encodings will do this.\n  unescaped = unescaped.replace(/_/g, \" \").replace(/&#95;/g, \"_\");\n  return parse(unescaped);\n}\n\n// Returns an empty sequence if the parameter is not present.\n// Throws an error if an alg is present but not valid.\nexport function getAlgURLParam(name: string): Sequence {\n  const s = new URLSearchParams(window.location.search).get(name) || \"\";\n  return deserializeURLParam(s);\n}\n\nexport interface AlgCubingNetOptions {\n  alg?: Sequence;\n  setup?: Sequence;\n  title?: string;\n  puzzle?:\n    | \"1x1x1\"\n    | \"2x2x2\"\n    | \"3x3x3\"\n    | \"4x4x4\"\n    | \"5x5x5\"\n    | \"6x6x6\"\n    | \"7x7x7\"\n    | \"8x8x8\"\n    | \"9x9x9\"\n    | \"10x10x10\"\n    | \"11x11x11\"\n    | \"12x12x12\"\n    | \"13x13x13\"\n    | \"14x14x14\"\n    | \"16x16x16\"\n    | \"17x17x17\";\n  stage?:\n    | \"full\"\n    | \"cross\"\n    | \"F2L\"\n    | \"LL\"\n    | \"OLL\"\n    | \"PLL\"\n    | \"CLS\"\n    | \"ELS\"\n    | \"L6E\"\n    | \"CMLL\"\n    | \"WV\"\n    | \"ZBLL\"\n    | \"void\";\n  view?: \"editor\" | \"playback\" | \"fullscreen\";\n  type?: \"moves\" | \"reconstruction\" | \"alg\" | \"reconstruction-end-with-setup\";\n}\n\n// TODO: runtime validation?\nexport function algCubingNetLink(options: AlgCubingNetOptions): string {\n  const url = new URL(\"https://alg.cubing.net\");\n  if (!options.alg) {\n    throw new Error(\"An alg parameter is required.\");\n  }\n  url.searchParams.set(\"alg\", serializeURLParam(options.alg));\n\n  if (options.setup) {\n    url.searchParams.set(\"setup\", serializeURLParam(options.setup));\n  }\n  if (options.title) {\n    url.searchParams.set(\"title\", options.title);\n  }\n  if (options.puzzle) {\n    if (\n      ![\n        \"1x1x1\",\n        \"2x2x2\",\n        \"3x3x3\",\n        \"4x4x4\",\n        \"5x5x5\",\n        \"6x6x6\",\n        \"7x7x7\",\n        \"8x8x8\",\n        \"9x9x9\",\n        \"10x10x10\",\n        \"11x11x11\",\n        \"12x12x12\",\n        \"13x13x13\",\n        \"14x14x14\",\n        \"16x16x16\",\n        \"17x17x17\",\n      ].includes(options.puzzle)\n    ) {\n      throw new Error(`Invalid puzzle parameter: ${options.puzzle}`);\n    }\n    url.searchParams.set(\"puzzle\", options.puzzle);\n  }\n  if (options.stage) {\n    if (\n      ![\n        \"full\",\n        \"cross\",\n        \"F2L\",\n        \"LL\",\n        \"OLL\",\n        \"PLL\",\n        \"CLS\",\n        \"ELS\",\n        \"L6E\",\n        \"CMLL\",\n        \"WV\",\n        \"ZBLL\",\n        \"void\",\n      ].includes(options.stage)\n    ) {\n      throw new Error(`Invalid stage parameter: ${options.stage}`);\n    }\n    url.searchParams.set(\"stage\", options.stage);\n  }\n  if (options.view) {\n    if (![\"editor\", \"playback\", \"fullscreen\"].includes(options.view)) {\n      throw new Error(`Invalid view parameter: ${options.view}`);\n    }\n    url.searchParams.set(\"view\", options.view);\n  }\n  if (options.type) {\n    if (\n      ![\n        \"moves\",\n        \"reconstruction\",\n        \"alg\",\n        \"reconstruction-end-with-setup\",\n      ].includes(options.type)\n    ) {\n      throw new Error(`Invalid type parameter: ${options.type}`);\n    }\n    url.searchParams.set(\"type\", options.type);\n  }\n  return url.toString();\n}\n"],"names":["a","t","matchesAlgType","$eba7976f41dde578104f699419088b8$exports","reportTypeMismatch","type","msg","currentReportingLevel","Error","numWarned","console","warn","level","AlgPart","[object Object]","$a8aeaf65ee84c206da41445ce65$var$_defineProperty","this","assertIsUnit","Unit","Move","Annotation","Container","constructor","nestedUnits","super","n","Object","freeze","nestedSequence","amount","A","B","comment","family","BlockMove","undefined","innerLayer","outerLayer","$ed5f099a2259964cccc8ff38ad98fb$var$_defineProperty","s","newMove","coalesceLastMove","mod","oldNestedUnits","oldLastMove","length","m2","m1","newNestedUnits","slice","newAmount","push","modifiedBlockMove","Sequence","args","Array","prototype","concat","apply","map","original","modifications","_modifications$outerL","_modifications$innerL","_modifications$family","_modifications$amount","move","algPartToStringForTesting","dispatch","algPart","dataDown","$a8aeaf65ee84c206da41445ce65$exports","assertMatchesType","traverseSequence","traverseGroup","traverseBlockMove","traverseCommutator","traverseConjugate","traversePause","traverseNewLine","traverseComment","TraversalDownUp","traverse","traverseIntoUnit","TraversalUp","Invert","sequence","reverse","group","Group","blockMove","commutator","Commutator","conjugate","Conjugate","pause","newLine","Expand","flattenSequenceOneLevel","repeat","expandedA","expandedB","once","invert","algList","flattened","part","isUnit","accordingTo","Math","abs","repeated","i","StructureEquals","dataDownSeq","_pause","_newLine","CoalesceBaseMoves","coalesced","last","sameBlock","pop","moveA","moveB","repetitionSuffix","absAmount","String","blockMoveToString","out","ToString","output","spaceBetween","u1","u2","invertInstance","expandInstance","structureEqualsInstance","coalesceBaseMovesInstance","algToStringInstance","bind","fromJSON","json","j","Pause","NewLine","Comment","unitFromJSON","parse","validators","validateSiGNAlg","validateSiGNMoves","validateFlatAlg","ValidationError","ValidatorTraversal","validateFamily","allowedFamilyLists","list","plainMoveFamilies","x","y","z","M","E","S","m","e","singleSliceMoveFamilies","U","L","F","R","D","wideMoveFamilies","u","l","f","r","b","d","Uw","Lw","Fw","Rw","Bw","Dw","BaseMoveValidator","unit","_comment","BlockMoveValidator","FlatAlgValidator","_group","_blockMove","_commutator","_conjugate","BlockMoveValidatorInstance","flatAlgValidatorInstance","peg$SyntaxError","message","expected","found","location","name","captureStackTrace","child","parent","ctor","peg$subclass","buildMessage","DESCRIBE_EXPECTATION_FNS","literal","expectation","literalEscape","text","class","escapedParts","parts","classEscape","inverted","any","end","other","description","hex","ch","charCodeAt","toString","toUpperCase","replace","descriptions","sort","join","describeExpected","describeFound","$d8b0c8918f3dd5818588d12ebbdfd6$var$_parser","SyntaxError","input","options","peg$result","peg$FAILED","peg$startRuleFunctions","start","peg$parsestart","peg$startRuleFunction","peg$c0","peg$c1","peg$classExpectation","peg$c4","peg$literalExpectation","peg$c7","peg$c8","peg$c13","peg$c16","peg$c17","peg$c18","peg$c20","peg$c23","peg$c25","peg$c30","peg$c31","peg$c32","peg$c34","peg$c35","peg$c38","peg$c42","peg$c43","peg$currPos","peg$posDetailsCache","line","column","peg$maxFailPos","peg$maxFailExpected","startRule","ignoreCase","peg$computePosDetails","pos","p","details","peg$computeLocation","startPos","endPos","startPosDetails","endPosDetails","offset","peg$fail","peg$buildStructuredError","peg$parseSEQUENCE","peg$parseNUMBER","s0","s1","s2","test","charAt","parseInt","peg$parseFAMILY","peg$parseREPEATABLE_UNIT","s3","s4","s5","peg$c11","peg$c14","peg$parseBLOCK_MOVE","peg$parseREPEATED_UNIT","repeatable_unit","peg$parseAMOUNT","peg$c28","peg$parseANNOTATION","substr","peg$parseCOMMENT","peg$parseSEGMENT_PART","peg$parseSEGMENT","segment_part","peg$c41","peg$parseUNIT_LIST","unit_list","parser","algo","$b1714a921ed3578bb0b7aebebb5c95$exports","$d8b0c8918f3dd5818588d12ebbdfd6$exports","validate","altKey","ctrlKey","cubeKeyMapping","keyCode","73","$c954828eab0f3155db4d17af85637$exports","BareBlockMove","75","87","79","83","76","68","69","74","70","72","71","78","67","82","85","77","88","188","84","89","66","186","59","65","80","81","90","190","deserializeURLParam","URLSearchParams","window","search","get","url","URL","alg","searchParams","set","serializeURLParam","setup","title","puzzle","includes","stage","view","escaped","$e0033444fb3cf6c0f42fca012199$exports","algToString","unescaped","$d5988ab02e5d3d6ca3b6b7a594c3ea6$exports"],"version":3,"file":"alg.js.map"}