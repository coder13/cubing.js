{"mappings":"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","sources":["./src/kpuzzle/index.ts","./src/alg/algorithm/alg-part.ts","./src/alg/debug.ts","./src/alg/algorithm/block-move.ts","./src/alg/operation.ts","./src/alg/traversal.ts","./src/alg/json.ts","./src/alg/parser/index.ts","./src/alg/validation.ts","./src/alg/parser/parser.pegjs","./src/alg/parser/parser.js","./src/alg/keyboard.ts","./src/alg/url.ts","./src/kpuzzle/transformations.ts","./src/kpuzzle/kpuzzle.ts","./src/kpuzzle/move_expander.ts","./src/kpuzzle/canonicalize.ts","./src/kpuzzle/definitions/index.ts","./src/kpuzzle/puzzle_definitions.ts","./src/kpuzzle/parser/parser.pegjs","./src/kpuzzle/parser/parser-shim.js","./src/kpuzzle/parser/parser.ts","./src/kpuzzle/svg.ts"],"sourcesContent":["import \"regenerator-runtime/runtime\"; // Prevent `regeneratorRuntime is not defined` error. https://github.com/babel/babel/issues/5085\n\nexport { KPuzzleDefinition, Transformation } from \"./definition_types\";\n\nexport { KPuzzle, stateForBlockMove } from \"./kpuzzle\";\n\nexport {\n  Canonicalize,\n  SearchSequence,\n  CanonicalSequenceIterator,\n} from \"./canonicalize\";\n\nexport {\n  Combine,\n  Multiply,\n  IdentityTransformation,\n  Invert,\n  EquivalentTransformations,\n  EquivalentStates,\n  Order,\n} from \"./transformations\";\n\nexport { Puzzles } from \"./puzzle_definitions\";\n\nexport { parse } from \"./parser\";\n\nexport { SVG } from \"./svg\";\n","import { reportTypeMismatch } from \"../debug\";\n\nexport type AlgPartType = string;\n\nexport abstract class AlgPart {\n  public abstract type: AlgPartType;\n}\n\n// type Constructor<T> = Function & { prototype: T }\nexport function matchesAlgType(a: any, t: AlgPartType): boolean {\n  return a.type === t;\n}\n\nexport function assertMatchesType<T extends AlgPart>(\n  a: any,\n  t: AlgPartType,\n): T {\n  if (!matchesAlgType(a, t)) {\n    reportTypeMismatch(`Expected \"type\": \"${t}\", saw \"type\": \"${a.type}\".`);\n  }\n  return a;\n}\n\n// Assumes that every `AlgPart` is a `Unit` or a `Sequence`.\nexport function isUnit(a: AlgPart): boolean {\n  if (!(\"type\" in a)) {\n    return false;\n  }\n  return !matchesAlgType(a, \"sequence\");\n}\n\nexport function assertIsUnit(a: AlgPart): Unit {\n  if (!(\"type\" in a)) {\n    reportTypeMismatch(`Expected \"unit\", saw a value that was not an AlgPart.`);\n  }\n  if (matchesAlgType(a, \"sequence\")) {\n    reportTypeMismatch(`Expected unit, saw \"sequence\".`);\n  }\n  return a;\n}\n\nexport abstract class Unit extends AlgPart {}\n\nexport abstract class Move extends Unit {}\nexport abstract class Annotation extends Unit {}\nexport abstract class Container extends Unit {}\n\n// TODO: Reintroduce an Algorithm class, and allow a mutable sequence too?\nexport class Sequence extends AlgPart {\n  public type: string = \"sequence\";\n  constructor(public nestedUnits: Unit[]) {\n    super();\n    for (const n of nestedUnits) {\n      assertIsUnit(n);\n    }\n    Object.freeze(this.nestedUnits);\n    Object.freeze(this);\n  }\n}\n\nexport interface WithAmount {\n  // TODO: Allow `amount` to be `undefined`, to distinguish between R and R1?\n  amount: number;\n}\nexport class Group extends Container implements WithAmount {\n  public type: string = \"group\";\n  constructor(public nestedSequence: Sequence, public amount: number = 1) {\n    super();\n    Object.freeze(this);\n  }\n}\nexport class Commutator extends Container implements WithAmount {\n  public type: string = \"commutator\";\n  constructor(\n    public A: Sequence,\n    public B: Sequence,\n    public amount: number = 1,\n  ) {\n    super();\n    Object.freeze(this);\n  }\n}\nexport class Conjugate extends Container implements WithAmount {\n  public type: string = \"conjugate\";\n  constructor(\n    public A: Sequence,\n    public B: Sequence,\n    public amount: number = 1,\n  ) {\n    super();\n    Object.freeze(this);\n  }\n}\nexport class Pause extends Move {\n  public type: string = \"pause\";\n  constructor() {\n    super();\n    Object.freeze(this);\n  }\n}\nexport class NewLine extends Annotation {\n  public type: string = \"newLine\";\n  constructor() {\n    super();\n    Object.freeze(this);\n  }\n}\n\n// TODO: must be followed by a newline, unless at the end of an alg?\nexport class Comment extends Annotation {\n  public type: string = \"comment\";\n  constructor(public comment: string) {\n    super();\n    Object.freeze(this);\n  }\n}\n\n// TODO\n// export class TimeStamp extends AlgPart implements AlgPart\n","type ReportingLevel = \"none\" | \"warn\" | \"error\";\nlet currentReportingLevel = \"warn\";\n\nconst MAX_NUMBER_OF_TIMES_TO_WARN = 10;\nlet numWarned = 0;\n\n// TODO: Avoid creating the string message if it won't be used (e.g. by taking a function?).\nexport function reportTypeMismatch(msg: string): void {\n  switch (currentReportingLevel) {\n    case \"error\":\n      throw new Error(msg);\n    case \"warn\":\n      numWarned++;\n      if (numWarned < MAX_NUMBER_OF_TIMES_TO_WARN) {\n        if (numWarned + 1 === MAX_NUMBER_OF_TIMES_TO_WARN) {\n          console.warn(msg);\n        }\n      }\n      return;\n  }\n}\n\nexport function setAlgPartTypeMismatchReportingLevel(\n  level: ReportingLevel,\n): void {\n  currentReportingLevel = level;\n}\n","import { Move } from \"./alg-part\";\n\nexport type MoveFamily = string; // TODO: Convert to an enum with string mappings.\n\n// TODO: Rename to `LetterMove`?\nexport class BlockMove extends Move {\n  public type: string = \"blockMove\";\n\n  // If `outerLayer` is set, `innerLayer` must also be set.\n  public outerLayer?: number;\n  public innerLayer?: number;\n  constructor(\n    outerLayer: number | undefined,\n    innerLayer: number | undefined,\n    public family: MoveFamily,\n    public amount: number = 1,\n  ) {\n    super();\n    if (innerLayer) {\n      this.innerLayer = innerLayer;\n      if (outerLayer) {\n        this.outerLayer = outerLayer;\n      }\n    }\n    if (outerLayer && !innerLayer) {\n      throw new Error(\n        \"Attempted to contruct block move with outer layer but no inner layer\",\n      );\n    }\n    Object.freeze(this);\n  }\n}\n\nexport function BareBlockMove(family: MoveFamily, amount?: number): BlockMove {\n  return new BlockMove(undefined, undefined, family, amount);\n}\n\nexport function LayerBlockMove(\n  innerLayer: number,\n  family: MoveFamily,\n  amount?: number,\n): BlockMove {\n  return new BlockMove(undefined, innerLayer, family, amount);\n}\n\nexport function RangeBlockMove(\n  outerLayer: number,\n  innerLayer: number,\n  family: MoveFamily,\n  amount?: number,\n): BlockMove {\n  return new BlockMove(outerLayer, innerLayer, family, amount);\n}\n","import { BlockMove, Sequence } from \"./algorithm\";\n\nfunction canCoalesce(m1: BlockMove, m2: BlockMove): boolean {\n  return (\n    m1.family === m2.family &&\n    m1.innerLayer === m2.innerLayer &&\n    m1.outerLayer === m2.outerLayer\n  );\n}\n\ninterface BlockMoveModifications {\n  outerLayer?: number;\n  innerLayer?: number;\n  family?: string;\n  amount?: number;\n}\n\nexport function modifiedBlockMove(\n  original: BlockMove,\n  modifications: BlockMoveModifications,\n): BlockMove {\n  // TODO: use the nullish coalescing operator once it becomes available to us.\n  return new BlockMove(\n    modifications.outerLayer ?? original.outerLayer,\n    modifications.innerLayer ?? original.innerLayer,\n    modifications.family ?? original.family,\n    modifications.amount ?? original.amount,\n  );\n}\n\nexport function experimentalAppendBlockMove(\n  s: Sequence,\n  newMove: BlockMove,\n  coalesceLastMove: boolean = false,\n  mod: number = 0,\n): Sequence {\n  const oldNestedUnits = s.nestedUnits;\n  const oldLastMove = oldNestedUnits[\n    oldNestedUnits.length - 1\n  ] as BlockMove | null;\n  if (coalesceLastMove && oldLastMove && canCoalesce(oldLastMove, newMove)) {\n    const newNestedUnits = s.nestedUnits.slice(0, oldNestedUnits.length - 1);\n    let newAmount = oldLastMove.amount + newMove.amount;\n    if (mod > 1) {\n      newAmount = ((newAmount % mod) + mod) % mod;\n      if (newAmount * 2 > mod) {\n        newAmount -= mod;\n      }\n    }\n    if (newAmount !== 0) {\n      newNestedUnits.push(\n        modifiedBlockMove(oldLastMove, { amount: newAmount }),\n      );\n    }\n    return new Sequence(newNestedUnits);\n  } else {\n    return new Sequence([...oldNestedUnits, newMove]);\n  }\n}\n\n// This purposely takes sequences as individual arguments, instead of a lsit of sequences, because:\n//\n// 1. This matches Javascript's built-in `Array.concat()` functionality.\n// 2. It encourages avoiding lists of sequences (which might lead to coding mistakes).\n//\n// TODO: Now useful is it to coalesce at alg boundaries (rather than coalescing the whole result)?\n// Should that be a separate function, or should we change this to accept coalescing option arg like `experimentalAppendBlockMove()`?\nexport function experimentalConcatAlgs(...args: Sequence[]): Sequence {\n  return new Sequence(\n    Array.prototype.concat.apply(\n      [],\n      [...args].map((s) => s.nestedUnits),\n    ),\n  );\n}\n","import {\n  assertIsUnit,\n  assertMatchesType,\n  isUnit,\n  matchesAlgType,\n} from \"./algorithm/alg-part\";\n\nimport {\n  AlgPart,\n  BlockMove,\n  Comment,\n  Commutator,\n  Conjugate,\n  Group,\n  NewLine,\n  Pause,\n  Sequence,\n  Unit,\n  WithAmount,\n} from \"./algorithm\";\n\nfunction dispatch<DataDown, DataUp>(\n  t: TraversalDownUp<DataDown, DataUp>,\n  algPart: AlgPart,\n  dataDown: DataDown,\n): DataUp {\n  switch (algPart.type) {\n    case \"sequence\":\n      assertMatchesType(algPart, \"sequence\");\n      return t.traverseSequence(algPart as Sequence, dataDown);\n    case \"group\":\n      assertMatchesType(algPart, \"group\");\n      return t.traverseGroup(algPart as Group, dataDown);\n    case \"blockMove\":\n      assertMatchesType(algPart, \"blockMove\");\n      return t.traverseBlockMove(algPart as BlockMove, dataDown);\n    case \"commutator\":\n      assertMatchesType(algPart, \"commutator\");\n      return t.traverseCommutator(algPart as Commutator, dataDown);\n    case \"conjugate\":\n      assertMatchesType(algPart, \"conjugate\");\n      return t.traverseConjugate(algPart as Conjugate, dataDown);\n    case \"pause\":\n      assertMatchesType(algPart, \"pause\");\n      return t.traversePause(algPart as Pause, dataDown);\n    case \"newLine\":\n      assertMatchesType(algPart, \"newLine\");\n      return t.traverseNewLine(algPart as NewLine, dataDown);\n    case \"comment\":\n      assertMatchesType(algPart, \"comment\");\n      return t.traverseComment(algPart as Comment, dataDown);\n    default:\n      throw new Error(`Unknown AlgPart type: ${algPart.type}`);\n  }\n}\n\nexport abstract class TraversalDownUp<DataDown, DataUp> {\n  // Immediate subclasses should overwrite this.\n  public traverse(algPart: AlgPart, dataDown: DataDown): DataUp {\n    return dispatch(this, algPart, dataDown);\n  }\n\n  public traverseIntoUnit(algPart: AlgPart, dataDown: DataDown): Unit {\n    return assertIsUnit(this.traverse(algPart, dataDown) as any);\n  }\n\n  public abstract traverseSequence(\n    sequence: Sequence,\n    dataDown: DataDown,\n  ): DataUp;\n\n  public abstract traverseGroup(group: Group, dataDown: DataDown): DataUp;\n  public abstract traverseBlockMove(\n    blockMove: BlockMove,\n    dataDown: DataDown,\n  ): DataUp;\n\n  public abstract traverseCommutator(\n    commutator: Commutator,\n    dataDown: DataDown,\n  ): DataUp;\n\n  public abstract traverseConjugate(\n    conjugate: Conjugate,\n    dataDown: DataDown,\n  ): DataUp;\n\n  public abstract traversePause(pause: Pause, dataDown: DataDown): DataUp;\n  public abstract traverseNewLine(newLine: NewLine, dataDown: DataDown): DataUp;\n  public abstract traverseComment(comment: Comment, dataDown: DataDown): DataUp;\n}\n\nexport abstract class TraversalUp<DataUp> extends TraversalDownUp<\n  undefined,\n  DataUp\n> {\n  public traverse(algPart: AlgPart): DataUp {\n    return dispatch<undefined, DataUp>(this, algPart, undefined);\n  }\n\n  public traverseIntoUnit(algPart: AlgPart): Unit {\n    return assertIsUnit(this.traverse(algPart) as any);\n  }\n\n  public abstract traverseSequence(sequence: Sequence): DataUp;\n  public abstract traverseGroup(group: Group): DataUp;\n  public abstract traverseBlockMove(blockMove: BlockMove): DataUp;\n  public abstract traverseCommutator(commutator: Commutator): DataUp;\n  public abstract traverseConjugate(conjugate: Conjugate): DataUp;\n  public abstract traversePause(pause: Pause): DataUp;\n  public abstract traverseNewLine(newLine: NewLine): DataUp;\n  public abstract traverseComment(comment: Comment): DataUp;\n}\n\n// TODO: Test that inverses are bijections.\nexport class Invert extends TraversalUp<AlgPart> {\n  public traverseSequence(sequence: Sequence): Sequence {\n    // TODO: Handle newLines and comments correctly\n    return new Sequence(\n      sequence.nestedUnits.map((a) => this.traverseIntoUnit(a)).reverse(),\n    );\n  }\n\n  public traverseGroup(group: Group): AlgPart {\n    return new Group(this.traverseSequence(group.nestedSequence), group.amount);\n  }\n\n  public traverseBlockMove(blockMove: BlockMove): AlgPart {\n    return new BlockMove(\n      blockMove.outerLayer,\n      blockMove.innerLayer,\n      blockMove.family,\n      -blockMove.amount,\n    );\n  }\n\n  public traverseCommutator(commutator: Commutator): AlgPart {\n    return new Commutator(commutator.B, commutator.A, commutator.amount);\n  }\n\n  public traverseConjugate(conjugate: Conjugate): AlgPart {\n    return new Conjugate(\n      conjugate.A,\n      this.traverseSequence(conjugate.B),\n      conjugate.amount,\n    );\n  }\n\n  public traversePause(pause: Pause): AlgPart {\n    return pause;\n  }\n\n  public traverseNewLine(newLine: NewLine): AlgPart {\n    return newLine;\n  }\n\n  public traverseComment(comment: Comment): AlgPart {\n    return comment;\n  }\n}\n\nexport class Expand extends TraversalUp<AlgPart> {\n  public traverseSequence(sequence: Sequence): Sequence {\n    return new Sequence(\n      this.flattenSequenceOneLevel(\n        sequence.nestedUnits.map((a) => this.traverse(a)),\n      ),\n    );\n  }\n\n  public traverseGroup(group: Group): AlgPart {\n    // TODO: Pass raw AlgPart[] to sequence.\n    return this.repeat(\n      this.flattenSequenceOneLevel([this.traverse(group.nestedSequence)]),\n      group,\n    );\n  }\n\n  public traverseBlockMove(blockMove: BlockMove): AlgPart {\n    return blockMove;\n  }\n\n  public traverseCommutator(commutator: Commutator): AlgPart {\n    const expandedA = this.traverseSequence(commutator.A);\n    const expandedB = this.traverseSequence(commutator.B);\n    let once: AlgPart[] = [];\n    once = once.concat(\n      expandedA,\n      expandedB,\n      invert(expandedA),\n      invert(expandedB),\n    );\n    return this.repeat(this.flattenSequenceOneLevel(once), commutator);\n  }\n\n  public traverseConjugate(conjugate: Conjugate): AlgPart {\n    const expandedA = this.traverseSequence(conjugate.A);\n    const expandedB = this.traverseSequence(conjugate.B);\n    let once: AlgPart[] = [];\n    once = once.concat(expandedA, expandedB, invert(expandedA));\n    return this.repeat(this.flattenSequenceOneLevel(once), conjugate);\n  }\n\n  public traversePause(pause: Pause): AlgPart {\n    return pause;\n  }\n\n  public traverseNewLine(newLine: NewLine): AlgPart {\n    return newLine;\n  }\n\n  public traverseComment(comment: Comment): AlgPart {\n    return comment;\n  }\n\n  private flattenSequenceOneLevel(algList: AlgPart[]): Unit[] {\n    let flattened: Unit[] = [];\n    for (const part of algList) {\n      if (matchesAlgType(part, \"sequence\")) {\n        flattened = flattened.concat((part as Sequence).nestedUnits);\n      } else if (isUnit(part)) {\n        flattened.push(part);\n      } else {\n        throw new Error(\n          \"expand() encountered an internal error. Did you pass in a valid Algorithm?\",\n        );\n      }\n    }\n    return flattened;\n  }\n\n  private repeat(algList: Unit[], accordingTo: WithAmount): Sequence {\n    const amount = Math.abs(accordingTo.amount);\n    const amountDir = accordingTo.amount > 0 ? 1 : -1; // Mutable\n\n    // TODO: Cleaner inversion\n    let once: Unit[];\n    if (amountDir === -1) {\n      // TODO: Avoid casting to sequence.\n      once = (invert(new Sequence(algList)) as Sequence).nestedUnits;\n    } else {\n      once = algList;\n    }\n\n    let repeated: Unit[] = [];\n    for (let i = 0; i < amount; i++) {\n      repeated = repeated.concat(once);\n    }\n\n    return new Sequence(repeated);\n  }\n}\n\nexport class StructureEquals extends TraversalDownUp<AlgPart, boolean> {\n  public traverseSequence(sequence: Sequence, dataDown: AlgPart): boolean {\n    if (isUnit(dataDown)) {\n      return false;\n    }\n    const dataDownSeq = dataDown as Sequence;\n    if (sequence.nestedUnits.length !== dataDownSeq.nestedUnits.length) {\n      return false;\n    }\n    for (let i = 0; i < sequence.nestedUnits.length; i++) {\n      if (!this.traverse(sequence.nestedUnits[i], dataDownSeq.nestedUnits[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public traverseGroup(group: Group, dataDown: AlgPart): boolean {\n    return (\n      matchesAlgType(dataDown, \"group\") &&\n      this.traverse(group.nestedSequence, (dataDown as Group).nestedSequence)\n    );\n  }\n\n  public traverseBlockMove(blockMove: BlockMove, dataDown: AlgPart): boolean {\n    // TODO: Handle layers.\n    return (\n      matchesAlgType(dataDown, \"blockMove\") &&\n      blockMove.outerLayer === (dataDown as BlockMove).outerLayer &&\n      blockMove.innerLayer === (dataDown as BlockMove).innerLayer &&\n      blockMove.family === (dataDown as BlockMove).family &&\n      blockMove.amount === (dataDown as BlockMove).amount\n    );\n  }\n\n  public traverseCommutator(\n    commutator: Commutator,\n    dataDown: AlgPart,\n  ): boolean {\n    return (\n      matchesAlgType(dataDown, \"commutator\") &&\n      this.traverse(commutator.A, (dataDown as Commutator).A) &&\n      this.traverse(commutator.B, (dataDown as Commutator).B)\n    );\n  }\n\n  public traverseConjugate(conjugate: Conjugate, dataDown: AlgPart): boolean {\n    return (\n      matchesAlgType(dataDown, \"conjugate\") &&\n      this.traverse(conjugate.A, (dataDown as Conjugate).A) &&\n      this.traverse(conjugate.B, (dataDown as Conjugate).B)\n    );\n  }\n\n  public traversePause(_pause: Pause, dataDown: AlgPart): boolean {\n    return matchesAlgType(dataDown, \"pause\");\n  }\n\n  public traverseNewLine(_newLine: NewLine, dataDown: AlgPart): boolean {\n    return matchesAlgType(dataDown, \"newLine\");\n  }\n\n  public traverseComment(comment: Comment, dataDown: AlgPart): boolean {\n    return (\n      matchesAlgType(dataDown, \"comment\") &&\n      comment.comment === (dataDown as Comment).comment\n    );\n  }\n}\n\n// TODO: Test that inverses are bijections.\nexport class CoalesceBaseMoves extends TraversalUp<AlgPart> {\n  // TODO: Handle\n  public traverseSequence(sequence: Sequence): Sequence {\n    const coalesced: Unit[] = [];\n    for (const part of sequence.nestedUnits) {\n      if (!matchesAlgType(part, \"blockMove\")) {\n        coalesced.push(this.traverseIntoUnit(part));\n      } else if (coalesced.length > 0) {\n        const last = coalesced[coalesced.length - 1];\n        if (\n          matchesAlgType(last, \"blockMove\") &&\n          this.sameBlock(last as BlockMove, part as BlockMove)\n        ) {\n          // TODO: This is cube-specific. Perhaps pass the modules as DataDown?\n          const amount =\n            (last as BlockMove).amount + (part as BlockMove).amount;\n          coalesced.pop();\n          if (amount !== 0) {\n            // We could modify the last element instead of creating a new one,\n            // but this is safe against shifting coding practices.\n            // TODO: Figure out if the shoot-in-the-foot risk\n            // modification is worth the speed.\n            coalesced.push(\n              new BlockMove(\n                (part as BlockMove).outerLayer,\n                (part as BlockMove).innerLayer,\n                (part as BlockMove).family,\n                amount,\n              ),\n            );\n          }\n        } else {\n          coalesced.push(part);\n        }\n      } else {\n        coalesced.push(part);\n      }\n    }\n    return new Sequence(coalesced);\n  }\n\n  public traverseGroup(group: Group): AlgPart {\n    return group;\n  }\n\n  public traverseBlockMove(blockMove: BlockMove): AlgPart {\n    return blockMove;\n  }\n\n  public traverseCommutator(commutator: Commutator): AlgPart {\n    return commutator;\n  }\n\n  public traverseConjugate(conjugate: Conjugate): AlgPart {\n    return conjugate;\n  }\n\n  public traversePause(pause: Pause): AlgPart {\n    return pause;\n  }\n\n  public traverseNewLine(newLine: NewLine): AlgPart {\n    return newLine;\n  }\n\n  public traverseComment(comment: Comment): AlgPart {\n    return comment;\n  }\n\n  private sameBlock(moveA: BlockMove, moveB: BlockMove): boolean {\n    // TODO: Handle layers\n    return (\n      moveA.outerLayer === moveB.outerLayer &&\n      moveA.innerLayer === moveB.innerLayer &&\n      moveA.family === moveB.family\n    );\n  }\n}\n\n// export class Concat extends TraversalDownUp<Algorithm, Sequence> {\n//   private concatIntoSequence(A: Unit[], B: Algorithm): Sequence {\n//     var nestedAlgs: Unit[] = A.slice();\n//     if (matchesAlgType(B, \"sequence\")) {\n//       nestedAlgs = nestedAlgs.concat((B as unknown as Sequence).nestedUnits)\n//     } else {\n//       nestedAlgs.push(B as unknown as Unit);\n//     }\n//     return new Sequence(nestedAlgs)\n//   }\n//   public traverseSequence(     sequence:     Sequence,     dataDown: Algorithm): Sequence {return this.concatIntoSequence(sequence.nestedUnits, dataDown); }\n//   public traverseGroup(        group:        Group,        dataDown: Algorithm): Sequence {return this.concatIntoSequence([group]          , dataDown); }\n//   public traverseBlockMove(    BlockMove:    BlockMove,    dataDown: Algorithm): Sequence {return this.concatIntoSequence([BlockMove]      , dataDown); }\n//   public traverseCommutator(   commutator:   Commutator,   dataDown: Algorithm): Sequence {return this.concatIntoSequence([commutator]     , dataDown); }\n//   public traverseConjugate(    conjugate:    Conjugate,    dataDown: Algorithm): Sequence {return this.concatIntoSequence([conjugate]      , dataDown); }\n//   public traversePause(        pause:        Pause,        dataDown: Algorithm): Sequence {return this.concatIntoSequence([pause]          , dataDown); }\n//   public traverseNewLine(      newLine:      NewLine,      dataDown: Algorithm): Sequence {return this.concatIntoSequence([newLine]        , dataDown); }\n//   public traverseComment( comment: Comment, dataDown: Algorithm): Sequence {return this.concatIntoSequence([comment]   , dataDown); }\n// }\n\nfunction repetitionSuffix(amount: number): string {\n  const absAmount = Math.abs(amount);\n  let s = \"\";\n  if (absAmount !== 1) {\n    s += String(absAmount);\n  }\n  if (absAmount !== amount) {\n    s += \"'\";\n  }\n  return s;\n}\nexport function blockMoveToString(blockMove: BlockMove): string {\n  let out = blockMove.family + repetitionSuffix(blockMove.amount);\n  if (typeof blockMove.innerLayer !== \"undefined\") {\n    out = String(blockMove.innerLayer) + out;\n    if (typeof blockMove.outerLayer !== \"undefined\") {\n      out = String(blockMove.outerLayer) + \"-\" + out;\n    }\n  }\n  return out;\n}\n\nexport class ToString extends TraversalUp<string> {\n  public traverseSequence(sequence: Sequence): string {\n    let output = \"\";\n    if (sequence.nestedUnits.length > 0) {\n      output += this.traverse(sequence.nestedUnits[0]);\n      for (let i = 1; i < sequence.nestedUnits.length; i++) {\n        output += this.spaceBetween(\n          sequence.nestedUnits[i - 1],\n          sequence.nestedUnits[i],\n        );\n        output += this.traverse(sequence.nestedUnits[i]);\n      }\n    }\n    return output;\n  }\n\n  public traverseGroup(group: Group): string {\n    return (\n      \"(\" +\n      this.traverse(group.nestedSequence) +\n      \")\" +\n      repetitionSuffix(group.amount)\n    );\n  }\n\n  public traverseBlockMove(blockMove: BlockMove): string {\n    return blockMoveToString(blockMove);\n  }\n\n  public traverseCommutator(commutator: Commutator): string {\n    return (\n      \"[\" +\n      this.traverse(commutator.A) +\n      \", \" +\n      this.traverse(commutator.B) +\n      \"]\" +\n      repetitionSuffix(commutator.amount)\n    );\n  }\n\n  public traverseConjugate(conjugate: Conjugate): string {\n    return (\n      \"[\" +\n      this.traverse(conjugate.A) +\n      \": \" +\n      this.traverse(conjugate.B) +\n      \"]\" +\n      repetitionSuffix(conjugate.amount)\n    );\n  }\n\n  // TODO: Remove spaces between repeated pauses (in traverseSequence)\n  public traversePause(_pause: Pause): string {\n    return \".\";\n  }\n\n  public traverseNewLine(_newLine: NewLine): string {\n    return \"\\n\";\n  }\n\n  // TODO: Enforce being followed by a newline (or the end of the alg)?\n  public traverseComment(comment: Comment): string {\n    return \"//\" + comment.comment;\n  }\n\n  // TODO: Sanitize `*/`\n  private spaceBetween(u1: Unit, u2: Unit): string {\n    if (matchesAlgType(u1, \"pause\") && matchesAlgType(u2, \"pause\")) {\n      return \"\";\n    }\n    if (matchesAlgType(u1, \"newLine\") || matchesAlgType(u2, \"newLine\")) {\n      return \"\";\n    }\n    if (matchesAlgType(u1, \"comment\") && !matchesAlgType(u2, \"newLine\")) {\n      return \"\\n\";\n    }\n    return \" \";\n  }\n}\n\nconst invertInstance = new Invert();\nconst expandInstance = new Expand();\nconst structureEqualsInstance = new StructureEquals();\nconst coalesceBaseMovesInstance = new CoalesceBaseMoves();\nconst algToStringInstance = new ToString();\n\nexport const invert = invertInstance.traverseSequence.bind(invertInstance) as (\n  a: Sequence,\n) => Sequence;\nexport const expand = expandInstance.traverseSequence.bind(expandInstance) as (\n  a: Sequence,\n) => Sequence;\nexport const structureEquals = structureEqualsInstance.traverseSequence.bind(\n  structureEqualsInstance,\n) as (a1: Sequence, a2: Sequence) => boolean;\nexport const coalesceBaseMoves = coalesceBaseMovesInstance.traverseSequence.bind(\n  coalesceBaseMovesInstance,\n) as (a: Sequence) => Sequence;\nexport const algToString = algToStringInstance.traverseSequence.bind(\n  algToStringInstance,\n) as (a: Sequence) => string;\n\nexport const algPartStructureEqualsForTesting = algToStringInstance.traverse.bind(\n  algToStringInstance,\n) as (a1: AlgPart, a2: AlgPart) => boolean;\nexport const algPartToStringForTesting = algToStringInstance.traverse.bind(\n  algToStringInstance,\n) as (a: AlgPart) => string;\n\nexport function experimentalBlockMoveQuantumName(move: BlockMove): string {\n  return algPartToStringForTesting(\n    new BlockMove(move.outerLayer, move.innerLayer, move.family, 1),\n  );\n}\n","import {\n  BlockMove,\n  Comment,\n  Commutator,\n  Conjugate,\n  Group,\n  NewLine,\n  Pause,\n  Sequence,\n  Unit,\n} from \"./algorithm\";\n\n// TODO: Turn this into a union.\nexport interface AlgJSON {\n  type: string;\n  nestedSequence?: AlgJSON;\n  nestedUnits?: AlgJSON[];\n  innerLayer?: number;\n  outerLayer?: number;\n  family?: string;\n  amount?: number;\n  A?: AlgJSON;\n  B?: AlgJSON;\n  comment?: string;\n}\n\nexport function fromJSON(json: AlgJSON): Sequence {\n  if (json.type !== \"sequence\") {\n    throw new Error(`Expected Sequence while parsing, got: ${json.type}`);\n  }\n  if (!json.nestedUnits) {\n    throw new Error(\"Missing nestedUnits\");\n  }\n  return new Sequence(json.nestedUnits.map((j) => unitFromJSON(j)));\n}\n\nfunction unitFromJSON(json: AlgJSON): Unit {\n  switch (json.type) {\n    case \"sequence\":\n      throw new Error(`Expected AlgPart while parsing, got \\`Sequence\\`.`);\n    case \"group\":\n      if (!json.nestedSequence) {\n        throw new Error(\"Missing nestedSequence\");\n      }\n      if (!json.amount) {\n        throw new Error(\"Missing amount\");\n      }\n      return new Group(fromJSON(json.nestedSequence), json.amount);\n    case \"blockMove\":\n      // TODO: Double-check that there is no outer layer without an inner layer?\n      if (!json.family) {\n        throw new Error(\"Missing family\");\n      }\n      if (!json.amount) {\n        throw new Error(\"Missing amount\");\n      }\n      return new BlockMove(\n        json.outerLayer,\n        json.innerLayer,\n        json.family,\n        json.amount,\n      );\n    case \"commutator\":\n      if (!json.A) {\n        throw new Error(\"Missing A\");\n      }\n      if (!json.B) {\n        throw new Error(\"Missing B\");\n      }\n      if (!json.amount) {\n        throw new Error(\"Missing amount\");\n      }\n      return new Commutator(fromJSON(json.A), fromJSON(json.B), json.amount);\n    case \"conjugate\":\n      if (!json.A) {\n        throw new Error(\"Missing A\");\n      }\n      if (!json.B) {\n        throw new Error(\"Missing B\");\n      }\n      if (!json.amount) {\n        throw new Error(\"Missing amount\");\n      }\n      return new Conjugate(fromJSON(json.A), fromJSON(json.B), json.amount);\n    case \"pause\":\n      return new Pause();\n    case \"newLine\":\n      return new NewLine();\n    case \"comment\":\n      // The empty string is nullish, so we check for it separately.\n      if (!json.comment && json.comment !== \"\") {\n        throw new Error(\"Missing comment\");\n      }\n      return new Comment(json.comment);\n    default:\n      throw new Error(`Unknown alg type: ${json.type}`);\n  }\n}\n","import { Sequence } from \"../algorithm\";\nimport { fromJSON } from \"../json\";\nimport { validateSiGNAlg, Validator } from \"../validation\";\nimport { parse as pegParse } from \"./parser\";\n\nexport interface ParseOptions {\n  validators?: Validator[];\n}\n\n// TODO: Include token location info.\n// TODO: Take validators in a way that allows optimizing parsing.\nexport function parse(\n  s: string,\n  options: ParseOptions = { validators: [] },\n): Sequence {\n  options.validators = options.validators || [];\n\n  const algo = fromJSON(pegParse(s));\n  for (const validate of options.validators) {\n    validate(algo);\n  }\n  return algo;\n}\n\nexport function parseSiGN(s: string): Sequence {\n  return parse(s, { validators: [validateSiGNAlg] });\n}\n","import {\n  BlockMove,\n  Comment,\n  Commutator,\n  Conjugate,\n  Group,\n  NewLine,\n  Pause,\n  Sequence,\n} from \"./algorithm\";\n\nimport { TraversalUp } from \"./traversal\";\n\nexport class ValidationError extends Error {}\n\nexport abstract class ValidatorTraversal extends TraversalUp<void> {}\n\ninterface FamilyList {\n  [s: string]: boolean;\n}\n\nfunction validateFamily(\n  family: string,\n  allowedFamilyLists: FamilyList[],\n): boolean {\n  for (const list of allowedFamilyLists) {\n    if (list[family] === true) {\n      return true;\n    }\n  }\n  return false;\n}\n\n// TODO: Switch to `Set`?\nconst plainMoveFamilies: FamilyList = {\n  x: true,\n  y: true,\n  z: true,\n  M: true,\n  E: true,\n  S: true,\n  m: true,\n  e: true,\n  s: true,\n};\n\nconst singleSliceMoveFamilies: FamilyList = {\n  U: true,\n  L: true,\n  F: true,\n  R: true,\n  B: true,\n  D: true,\n};\n\nconst wideMoveFamilies: FamilyList = {\n  u: true,\n  l: true,\n  f: true,\n  r: true,\n  b: true,\n  d: true,\n  Uw: true,\n  Lw: true,\n  Fw: true,\n  Rw: true,\n  Bw: true,\n  Dw: true,\n};\n\nabstract class BaseMoveValidator extends ValidatorTraversal {\n  public traverseSequence(sequence: Sequence): void {\n    // TODO: Handle newLines and comments correctly\n    for (const unit of sequence.nestedUnits) {\n      this.traverse(unit);\n    }\n  }\n\n  public traverseGroup(group: Group): void {\n    return this.traverse(group.nestedSequence);\n  }\n\n  public traverseCommutator(commutator: Commutator): void {\n    this.traverse(commutator.A);\n    this.traverse(commutator.B);\n  }\n\n  public traverseConjugate(conjugate: Conjugate): void {\n    this.traverse(conjugate.A);\n    this.traverse(conjugate.B);\n  }\n\n  public traversePause(_pause: Pause): void {\n    return;\n  }\n\n  public traverseNewLine(_newLine: NewLine): void {\n    return;\n  }\n\n  public traverseComment(_comment: Comment): void {\n    return;\n  }\n}\n\n// TODO: Export function instead?\nexport class BlockMoveValidator extends BaseMoveValidator {\n  public traverseBlockMove(blockMove: BlockMove): void {\n    if (typeof blockMove.outerLayer !== \"undefined\") {\n      if (typeof blockMove.innerLayer === \"undefined\") {\n        throw new ValidationError(\n          \"A BlockMove with an outer layer must have an inner layer.\",\n        );\n      }\n      if (!validateFamily(blockMove.family, [wideMoveFamilies])) {\n        throw new ValidationError(\n          `The provided SiGN move family is invalid, or cannot have an outer and inner layer: ${blockMove.family}`,\n        );\n      }\n      if (blockMove.outerLayer <= 0) {\n        throw new ValidationError(\"Cannot have an outer layer of 0 or less.\");\n      }\n      // TODO: Allow 2-2r?\n      if (blockMove.outerLayer >= blockMove.innerLayer) {\n        throw new ValidationError(\n          \"The outer layer must be less than the inner layer.\",\n        );\n      }\n      return;\n    } else if (typeof blockMove.innerLayer !== \"undefined\") {\n      if (\n        !validateFamily(blockMove.family, [\n          wideMoveFamilies,\n          singleSliceMoveFamilies,\n        ])\n      ) {\n        throw new ValidationError(\n          `The provided SiGN move family is invalid, or cannot have an inner slice: ${blockMove.family}`,\n        );\n      }\n      if (blockMove.innerLayer <= 0) {\n        throw new ValidationError(\"Cannot have an inner layer of 0 or less.\");\n      }\n      return;\n    } else {\n      if (\n        !validateFamily(blockMove.family, [\n          wideMoveFamilies,\n          singleSliceMoveFamilies,\n          plainMoveFamilies,\n        ])\n      ) {\n        throw new ValidationError(\n          `Invalid SiGN plain move family: ${blockMove.family}`,\n        );\n      }\n      return;\n    }\n  }\n}\n\n// TODO: Export function instead?\nexport class FlatAlgValidator extends ValidatorTraversal {\n  public traverseSequence(sequence: Sequence): void {\n    // TODO: Handle newLines and comments correctly\n    for (const unit of sequence.nestedUnits) {\n      this.traverse(unit);\n    }\n    return;\n  }\n\n  public traverseGroup(_group: Group): void {\n    throw new ValidationError(\"A flat alg cannot contain a group.\");\n  }\n\n  public traverseBlockMove(_blockMove: BlockMove): void {\n    return;\n  }\n\n  public traverseCommutator(_commutator: Commutator): void {\n    throw new ValidationError(\"A flat alg cannot contain a commutator.\");\n  }\n\n  public traverseConjugate(_conjugate: Conjugate): void {\n    throw new ValidationError(\"A flat alg cannot contain a conjugate.\");\n  }\n\n  public traversePause(_pause: Pause): void {\n    return;\n  }\n\n  public traverseNewLine(_newLine: NewLine): void {\n    return;\n  }\n\n  public traverseComment(_comment: Comment): void {\n    return;\n  }\n}\n\nexport type Validator = (a: Sequence) => void;\n\nconst BlockMoveValidatorInstance = new BlockMoveValidator();\nexport const validateSiGNMoves = BlockMoveValidatorInstance.traverse.bind(\n  BlockMoveValidatorInstance,\n) as Validator;\n\nconst flatAlgValidatorInstance = new FlatAlgValidator();\nexport const validateFlatAlg = flatAlgValidatorInstance.traverse.bind(\n  flatAlgValidatorInstance,\n) as Validator;\n\n// TODO: Option for puzzle size?\nexport function validateSiGNAlg(a: Sequence): void {\n  validateSiGNMoves(a);\n  validateFlatAlg(a);\n}\n","start = SEQUENCE\n\nNUMBER = characters:[0-9]+ { return parseInt(characters.join(\"\"), 10); }\n\nAMOUNT = repetition:NUMBER \"'\" { return -repetition; }\n       / NUMBER\n       / \"'\" { return -1; }\n\nFAMILY = characters:[_A-Za-z]+ { return characters.join(\"\"); }\nBLOCK_MOVE = family:FAMILY { return {type: \"blockMove\", family: family}; }\n           / innerLayer:NUMBER family:FAMILY { return {type: \"blockMove\", family: family, innerLayer: innerLayer}; }\n           / outerLayer:NUMBER \"-\" innerLayer:NUMBER family:FAMILY { return {type: \"blockMove\", family: family, outerLayer: outerLayer, innerLayer: innerLayer}; }\n\nREPEATABLE_UNIT = BLOCK_MOVE\n                // We parse commutators/conjugates together to reduce branching.\n                / \"[\" a:SEQUENCE separator:[,:] b:SEQUENCE \"]\" { return {\"type\": separator === \",\" ? \"commutator\" : \"conjugate\", \"A\": a, \"B\": b}; }\n                / \"(\" nestedSequence:SEQUENCE \")\" { return {\"type\": \"group\", \"nestedSequence\": nestedSequence}; }\n\nREPEATED_UNIT = repeatable_unit:REPEATABLE_UNIT amount:AMOUNT { repeatable_unit.amount = amount; return repeatable_unit; }\n              / repeatable_unit:REPEATABLE_UNIT { repeatable_unit.amount = 1; return repeatable_unit; }\n\nCOMMENT = \"//\" body:[^\\n\\r]* { return {type: \"comment\", comment: body.join(\"\")}; }\n\nANNOTATION = [\\n\\r] { return {\"type\": \"newLine\"}; }\n           / \".\" { return {\"type\": \"pause\"}; }\n           / COMMENT\n\nSEGMENT_PART = REPEATED_UNIT\n             / ANNOTATION\n\nSEGMENT = segment_part:SEGMENT_PART segment:SEGMENT { return [segment_part].concat(segment); }\n        / segment_part:SEGMENT_PART { return [segment_part]; }\n\nUNIT_LIST = segment:SEGMENT [ ]+ unit_list:UNIT_LIST { return segment.concat(unit_list); }\n          / SEGMENT\n\nSEQUENCE = [ ]* unit_list:UNIT_LIST [ ]* { return {\"type\": \"sequence\", \"nestedUnits\": unit_list}; }\n         / [ ]* { return {\"type\": \"sequence\", \"nestedUnits\": []}; }\n","// Workaround per https://github.com/pegjs/pegjs/pull/481\nimport parser from \"./parser.pegjs\";\nconst { parse } = parser;\nexport { parse };\n","import { BareBlockMove, BlockMove } from \"./algorithm\";\n\nconst cubeKeyMapping: { [key: number]: BlockMove } = {\n  73: BareBlockMove(\"R\"),\n  75: BareBlockMove(\"R\", -1),\n  87: BareBlockMove(\"B\"),\n  79: BareBlockMove(\"B\", -1),\n  83: BareBlockMove(\"D\"),\n  76: BareBlockMove(\"D\", -1),\n  68: BareBlockMove(\"L\"),\n  69: BareBlockMove(\"L\", -1),\n  74: BareBlockMove(\"U\"),\n  70: BareBlockMove(\"U\", -1),\n  72: BareBlockMove(\"F\"),\n  71: BareBlockMove(\"F\", -1),\n\n  78: BareBlockMove(\"x\", -1),\n  67: BareBlockMove(\"l\"),\n  82: BareBlockMove(\"l\", -1),\n  85: BareBlockMove(\"r\"),\n  77: BareBlockMove(\"r\", -1),\n\n  88: BareBlockMove(\"d\", 1),\n  188: BareBlockMove(\"d\", -1),\n\n  84: BareBlockMove(\"x\"),\n  89: BareBlockMove(\"x\"),\n  66: BareBlockMove(\"x\", -1),\n  186: BareBlockMove(\"y\"),\n  59: BareBlockMove(\"y\"),\n  65: BareBlockMove(\"y\", -1), // 186 is WebKit, 59 is Mozilla; see http://unixpapa.com/js/key.html\n  80: BareBlockMove(\"z\"),\n  81: BareBlockMove(\"z\", -1),\n\n  90: BareBlockMove(\"M\", -1),\n  190: BareBlockMove(\"M\", -1),\n};\n\n// TODO: options about whether to ignore modifier keys (e.g. alt, ctrl).\n// TODO: Support different mappings.\n// TODO: Return BaseMove instead?\nexport function keyToMove(e: KeyboardEvent): BlockMove | null {\n  if (e.altKey || e.ctrlKey) {\n    return null;\n  }\n\n  return cubeKeyMapping[e.keyCode] || null;\n}\n","import { Sequence } from \"./algorithm\";\nimport { parse } from \"./parser\";\nimport { algToString } from \"./traversal\";\n\n// This is not the most sophisticated scheme, but it has been used in production\n// at alg.cubing.net for years.\nexport function serializeURLParam(a: Sequence): string {\n  let escaped = algToString(a);\n  escaped = escaped.replace(/_/g, \"&#95;\").replace(/ /g, \"_\");\n  escaped = escaped.replace(/\\+/g, \"&#2b;\");\n  escaped = escaped.replace(/-/g, \"&#45;\").replace(/'/g, \"-\");\n  return escaped;\n}\n\nexport function deserializeURLParam(a: string): Sequence {\n  let unescaped = a;\n  unescaped = unescaped.replace(/-/g, \"'\").replace(/&#45;/g, \"-\");\n  unescaped = unescaped.replace(/\\+/g, \" \").replace(/&#2b;/g, \"+\"); // Recognize + as space. Many URL encodings will do this.\n  unescaped = unescaped.replace(/_/g, \" \").replace(/&#95;/g, \"_\");\n  return parse(unescaped);\n}\n\n// Returns an empty sequence if the parameter is not present.\n// Throws an error if an alg is present but not valid.\nexport function getAlgURLParam(name: string): Sequence {\n  const s = new URLSearchParams(window.location.search).get(name) || \"\";\n  return deserializeURLParam(s);\n}\n\nexport interface AlgCubingNetOptions {\n  alg?: Sequence;\n  setup?: Sequence;\n  title?: string;\n  puzzle?:\n    | \"1x1x1\"\n    | \"2x2x2\"\n    | \"3x3x3\"\n    | \"4x4x4\"\n    | \"5x5x5\"\n    | \"6x6x6\"\n    | \"7x7x7\"\n    | \"8x8x8\"\n    | \"9x9x9\"\n    | \"10x10x10\"\n    | \"11x11x11\"\n    | \"12x12x12\"\n    | \"13x13x13\"\n    | \"14x14x14\"\n    | \"16x16x16\"\n    | \"17x17x17\";\n  stage?:\n    | \"full\"\n    | \"cross\"\n    | \"F2L\"\n    | \"LL\"\n    | \"OLL\"\n    | \"PLL\"\n    | \"CLS\"\n    | \"ELS\"\n    | \"L6E\"\n    | \"CMLL\"\n    | \"WV\"\n    | \"ZBLL\"\n    | \"void\";\n  view?: \"editor\" | \"playback\" | \"fullscreen\";\n  type?: \"moves\" | \"reconstruction\" | \"alg\" | \"reconstruction-end-with-setup\";\n}\n\n// TODO: runtime validation?\nexport function algCubingNetLink(options: AlgCubingNetOptions): string {\n  const url = new URL(\"https://alg.cubing.net\");\n  if (!options.alg) {\n    throw new Error(\"An alg parameter is required.\");\n  }\n  url.searchParams.set(\"alg\", serializeURLParam(options.alg));\n\n  if (options.setup) {\n    url.searchParams.set(\"setup\", serializeURLParam(options.setup));\n  }\n  if (options.title) {\n    url.searchParams.set(\"title\", options.title);\n  }\n  if (options.puzzle) {\n    if (\n      ![\n        \"1x1x1\",\n        \"2x2x2\",\n        \"3x3x3\",\n        \"4x4x4\",\n        \"5x5x5\",\n        \"6x6x6\",\n        \"7x7x7\",\n        \"8x8x8\",\n        \"9x9x9\",\n        \"10x10x10\",\n        \"11x11x11\",\n        \"12x12x12\",\n        \"13x13x13\",\n        \"14x14x14\",\n        \"16x16x16\",\n        \"17x17x17\",\n      ].includes(options.puzzle)\n    ) {\n      throw new Error(`Invalid puzzle parameter: ${options.puzzle}`);\n    }\n    url.searchParams.set(\"puzzle\", options.puzzle);\n  }\n  if (options.stage) {\n    if (\n      ![\n        \"full\",\n        \"cross\",\n        \"F2L\",\n        \"LL\",\n        \"OLL\",\n        \"PLL\",\n        \"CLS\",\n        \"ELS\",\n        \"L6E\",\n        \"CMLL\",\n        \"WV\",\n        \"ZBLL\",\n        \"void\",\n      ].includes(options.stage)\n    ) {\n      throw new Error(`Invalid stage parameter: ${options.stage}`);\n    }\n    url.searchParams.set(\"stage\", options.stage);\n  }\n  if (options.view) {\n    if (![\"editor\", \"playback\", \"fullscreen\"].includes(options.view)) {\n      throw new Error(`Invalid view parameter: ${options.view}`);\n    }\n    url.searchParams.set(\"view\", options.view);\n  }\n  if (options.type) {\n    if (\n      ![\n        \"moves\",\n        \"reconstruction\",\n        \"alg\",\n        \"reconstruction-end-with-setup\",\n      ].includes(options.type)\n    ) {\n      throw new Error(`Invalid type parameter: ${options.type}`);\n    }\n    url.searchParams.set(\"type\", options.type);\n  }\n  return url.toString();\n}\n","import { KPuzzleDefinition, Transformation } from \"./definition_types\";\n\nexport function Combine(\n  def: KPuzzleDefinition,\n  t1: Transformation,\n  t2: Transformation,\n): Transformation {\n  const newTrans: Transformation = {} as Transformation;\n  for (const orbitName in def.orbits) {\n    const oDef = def.orbits[orbitName];\n    const o1 = t1[orbitName];\n    const o2 = t2[orbitName];\n    const newPerm = new Array(oDef.numPieces);\n    const newOri = new Array(oDef.numPieces);\n    for (let idx = 0; idx < oDef.numPieces; idx++) {\n      newOri[idx] =\n        (o1.orientation[o2.permutation[idx]] + o2.orientation[idx]) %\n        oDef.orientations;\n      newPerm[idx] = o1.permutation[o2.permutation[idx]];\n    }\n    newTrans[orbitName] = { permutation: newPerm, orientation: newOri };\n  }\n  return newTrans;\n}\n\nexport function Multiply(\n  def: KPuzzleDefinition,\n  t: Transformation,\n  amount: number,\n): Transformation {\n  if (amount < 0) {\n    return Multiply(def, Invert(def, t), -amount);\n  }\n  if (amount === 0) {\n    return IdentityTransformation(def);\n  }\n  if (amount === 1) {\n    return t;\n  }\n  const halfish = Multiply(def, t, Math.floor(amount / 2));\n  const twiceHalfish = Combine(def, halfish, halfish);\n  if (amount % 2 === 0) {\n    return twiceHalfish;\n  } else {\n    return Combine(def, t, twiceHalfish);\n  }\n}\nexport function IdentityTransformation(\n  definition: KPuzzleDefinition,\n): Transformation {\n  const transformation = {} as Transformation;\n  for (const orbitName in definition.orbits) {\n    const orbitDefinition = definition.orbits[orbitName];\n    const newPermutation = new Array(orbitDefinition.numPieces);\n    const newOrientation = new Array(orbitDefinition.numPieces);\n    for (let i = 0; i < orbitDefinition.numPieces; i++) {\n      newPermutation[i] = i;\n      newOrientation[i] = 0;\n    }\n    const orbitTransformation = {\n      permutation: newPermutation,\n      orientation: newOrientation,\n    };\n    transformation[orbitName] = orbitTransformation;\n  }\n  return transformation;\n}\n\nexport function Invert(\n  def: KPuzzleDefinition,\n  t: Transformation,\n): Transformation {\n  const newTrans: Transformation = {} as Transformation;\n  for (const orbitName in def.orbits) {\n    const oDef = def.orbits[orbitName];\n    const o = t[orbitName];\n    const newPerm = new Array(oDef.numPieces);\n    const newOri = new Array(oDef.numPieces);\n    for (let idx = 0; idx < oDef.numPieces; idx++) {\n      const fromIdx = o.permutation[idx] as number;\n      newPerm[fromIdx] = idx;\n      newOri[fromIdx] =\n        (oDef.orientations - o.orientation[idx] + oDef.orientations) %\n        oDef.orientations;\n    }\n    newTrans[orbitName] = { permutation: newPerm, orientation: newOri };\n  }\n  return newTrans;\n}\n\nfunction gcd(a: number, b: number): number {\n  if (b) {\n    return gcd(b, a % b);\n  }\n  return a;\n}\n/* calculate the order of a particular transformation. */\nexport function Order(def: KPuzzleDefinition, t: Transformation): number {\n  let r: number = 1;\n  for (const orbitName in def.orbits) {\n    const oDef = def.orbits[orbitName];\n    const o = t[orbitName];\n    const d = new Array(oDef.numPieces);\n    for (let idx = 0; idx < oDef.numPieces; idx++) {\n      if (!d[idx]) {\n        let w = idx;\n        let om = 0;\n        let pm = 0;\n        for (;;) {\n          d[w] = true;\n          om = om + o.orientation[w];\n          pm = pm + 1;\n          w = o.permutation[w];\n          if (w === idx) {\n            break;\n          }\n        }\n        if (om !== 0) {\n          pm = (pm * oDef.orientations) / gcd(oDef.orientations, om);\n        }\n        r = (r * pm) / gcd(r, pm);\n      }\n    }\n  }\n  return r;\n}\n\nexport function EquivalentTransformations(\n  def: KPuzzleDefinition,\n  t1: Transformation,\n  t2: Transformation,\n): boolean {\n  for (const orbitName in def.orbits) {\n    const oDef = def.orbits[orbitName];\n    const o1 = t1[orbitName];\n    const o2 = t2[orbitName];\n    for (let idx = 0; idx < oDef.numPieces; idx++) {\n      if (o1.orientation[idx] !== o2.orientation[idx]) {\n        return false;\n      }\n      if (o1.permutation[idx] !== o2.permutation[idx]) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nexport function EquivalentStates(\n  def: KPuzzleDefinition,\n  t1: Transformation,\n  t2: Transformation,\n): boolean {\n  // Turn transformations into states.\n  // This accounts for indistinguishable pieces.\n  return EquivalentTransformations(\n    def,\n    Combine(def, def.startPieces, t1),\n    Combine(def, def.startPieces, t2),\n  );\n}\n","import { BlockMove, blockMoveToString, expand, Sequence } from \"../alg\";\nimport { KPuzzleDefinition, Transformation } from \"./definition_types\";\nimport { MoveExpander } from \"./move_expander\";\nimport { Multiply, IdentityTransformation, Combine } from \"./transformations\";\n\n// TODO: Move other helpers into the definition.\nexport function stateForBlockMove(\n  def: KPuzzleDefinition,\n  blockMove: BlockMove,\n): Transformation {\n  // TODO: Optimize this.\n  const repMoveString = blockMoveToString(\n    new BlockMove(\n      blockMove.outerLayer,\n      blockMove.innerLayer,\n      blockMove.family,\n      1,\n    ),\n  );\n  let move: Transformation | undefined = def.moves[repMoveString];\n  if (!move) {\n    move = new KPuzzle(def).expandSlices(repMoveString, blockMove);\n  }\n  if (!move) {\n    throw new Error(`Unknown move family: ${blockMove.family}`);\n  }\n  return Multiply(def, move, blockMove.amount);\n}\n\nexport class KPuzzle {\n  public state: Transformation;\n  constructor(public definition: KPuzzleDefinition) {\n    this.state = IdentityTransformation(definition);\n  }\n\n  public reset(): void {\n    this.state = IdentityTransformation(this.definition);\n  }\n\n  public serialize(): string {\n    let output = \"\";\n    for (const orbitName in this.definition.orbits) {\n      output += orbitName + \"\\n\";\n      output += this.state[orbitName].permutation.join(\" \") + \"\\n\";\n      output += this.state[orbitName].orientation.join(\" \") + \"\\n\";\n    }\n    output = output.slice(0, output.length - 1); // Trim last newline.\n    return output;\n  }\n\n  public applyBlockMove(blockMove: BlockMove): void {\n    this.state = Combine(\n      this.definition,\n      this.state,\n      stateForBlockMove(this.definition, blockMove),\n    );\n  }\n\n  public applyAlg(a: Sequence): void {\n    // TODO: Iterator instead of full expansion.\n    for (const move of expand(a).nestedUnits as BlockMove[]) {\n      this.applyBlockMove(move);\n    }\n  }\n\n  public applyMove(moveName: string): this {\n    let move: Transformation | undefined = this.definition.moves[moveName];\n    if (!move) {\n      move = this.expandSlicesByName(moveName);\n    }\n    if (!move) {\n      throw new Error(`Unknown move: ${moveName}`);\n    }\n\n    this.state = Combine(this.definition, this.state, move);\n    return this;\n  }\n\n  public getMoveExpander(create: boolean): MoveExpander | undefined {\n    let moveExpander = this.definition.moveExpander;\n    if (create && !moveExpander) {\n      moveExpander = new MoveExpander();\n      this.definition.moveExpander = moveExpander;\n    }\n    return moveExpander;\n  }\n\n  public setFaceNames(faceNames: string[]): void {\n    const me = this.getMoveExpander(true);\n    if (me) {\n      me.setFaceNames(faceNames);\n    }\n  }\n\n  public addGrip(grip1: string, grip2: string, nslices: number): void {\n    const me = this.getMoveExpander(true);\n    return me ? me.addGrip(grip1, grip2, nslices, this.definition) : undefined;\n  }\n\n  public expandSlices(\n    rep: string,\n    blockMove: BlockMove,\n  ): Transformation | undefined {\n    const me = this.getMoveExpander(false);\n    return me ? me.expandSlices(rep, blockMove, this.definition) : undefined;\n  }\n\n  public expandSlicesByName(mv: string): Transformation | undefined {\n    const me = this.getMoveExpander(false);\n    return me ? me.expandSlicesByName(mv, this.definition) : undefined;\n  }\n\n  public unswizzle(grip: string): string {\n    const me = this.getMoveExpander(true);\n    return me ? me.unswizzle(grip) : grip;\n  }\n\n  // TODO: Implement\n  // parseState(): this {}\n\n  // TODO: Alg parsing\n\n  // TODO: Implement.\n  // invert(): this {}\n}\n","//   This class supports expanding a set of slice moves (for instance,\n//   U, 2U, 3U, 2D, D on the 5x5x5) into a full set of outer block, inner\n//   slice, etc. moves such as 2-3u or 5U, automatically.  The addGrip()\n//   method informs us what grips exist and how many slices there are.\n//   The setFaceNames() method tells us what the names of the faces are\n//   so we can unswizzle swizzled grip names.\n\nimport { Transformation, KPuzzleDefinition } from \"./definition_types\";\nimport { Invert, Combine } from \"./transformations\";\nimport { BlockMove, parse } from \"../alg\";\n\nexport class MoveExpander {\n  private gripStash: { [key: string]: Transformation[] };\n  private moveStash: { [key: string]: Transformation };\n  private facenames?: string[];\n  private regrip: { [key: string]: string };\n  constructor() {\n    this.gripStash = {};\n    this.moveStash = {};\n    this.regrip = {};\n  }\n\n  public setFaceNames(fn: string[]): void {\n    this.facenames = fn;\n  }\n\n  public addGrip(\n    grip1: string,\n    grip2: string,\n    nslices: number,\n    def: KPuzzleDefinition,\n  ): void {\n    const slices = [];\n    const axes = this.gripStash;\n    const moves = def.moves;\n    for (let i = 1; i <= nslices; i++) {\n      let t = (i === 1 && moves[grip1]) || moves[\"\" + i + grip1];\n      if (!t) {\n        t =\n          (i === nslices && moves[grip2]) ||\n          moves[\"\" + (nslices + 1 - i) + grip2];\n        if (t) {\n          t = Invert(def, t);\n        }\n      }\n      if (!t) {\n        throw new Error(\n          \"Could not expand axis \" +\n            grip1 +\n            \" to \" +\n            grip2 +\n            \" because we are missing a move for slice \" +\n            i,\n        );\n      }\n      slices.push(t);\n    }\n    axes[grip1] = slices;\n    const aprime = slices.map((_: Transformation) => Invert(def, _));\n    aprime.reverse();\n    axes[grip2] = aprime;\n  }\n\n  public expandSlicesByName(\n    mv: string,\n    def: KPuzzleDefinition,\n  ): Transformation | undefined {\n    const t = this.moveStash[mv];\n    if (t) {\n      return t;\n    }\n    try {\n      const alg = parse(mv);\n      if (alg.nestedUnits.length !== 1) {\n        return undefined;\n      }\n      const signmove = alg.nestedUnits[0] as BlockMove; // need better way\n      return this.expandSlices(mv, signmove, def);\n    } catch (e) {\n      return undefined;\n    }\n  }\n\n  public unswizzle(grip: string): string {\n    if (this.regrip[grip]) {\n      return this.regrip[grip];\n    }\n    if (!this.facenames) {\n      return grip;\n    }\n    // permit unswizzle to strip w and p suffixes for callers\n    // other than the internal move expander below.\n    if (grip.length > 1) {\n      if (\n        grip[0] <= \"Z\" &&\n        (grip[grip.length - 1] === \"w\" || grip[grip.length - 1] === \"v\")\n      ) {\n        grip = grip.substr(0, grip.length - 1);\n      }\n    }\n    const faceSplit = this.splitByFaceNames(grip, this.facenames);\n    if (faceSplit) {\n      for (let i = 0; i < faceSplit.length; i++) {\n        let testGrip = \"\";\n        for (let j = 0; j < faceSplit.length; j++) {\n          testGrip += faceSplit[(i + j) % faceSplit.length];\n        }\n        if (this.gripStash[testGrip]) {\n          this.regrip[grip] = testGrip;\n          return testGrip;\n        }\n      }\n    }\n    return grip;\n  }\n\n  public expandSlices(\n    rep: string,\n    blockMove: BlockMove,\n    def: KPuzzleDefinition,\n  ): Transformation | undefined {\n    const t = this.moveStash[rep];\n    if (t) {\n      return t;\n    }\n    const axes = this.gripStash;\n    const family = blockMove.family;\n    let grip = family;\n    let isBlock = false;\n    let isPuzzle = false;\n    // the following \"reparse\" code is almost certainly wrong\n    if (/[a-z]/.test(family)) {\n      isBlock = true;\n      grip = family.toUpperCase();\n    }\n    if (family.length > 1 && family.endsWith(\"w\")) {\n      isBlock = true;\n      grip = family.substring(0, family.length - 1);\n    }\n    if (family.length > 1 && family.endsWith(\"v\")) {\n      isPuzzle = true;\n      grip = family.substring(0, family.length - 1);\n    }\n    let slices = axes[grip];\n    if (!slices && this.facenames) {\n      grip = this.unswizzle(grip);\n      slices = axes[grip];\n    }\n    if (!slices) {\n      return undefined;\n    } // don't throw here; let others catch it\n    let outer = blockMove.outerLayer;\n    let inner = blockMove.innerLayer;\n    if (inner === undefined) {\n      if (outer === undefined) {\n        outer = 1;\n        inner = isBlock ? 2 : 1;\n        if (isPuzzle) {\n          inner = axes[grip].length;\n        }\n      } else {\n        return undefined;\n      } // should never happen\n    } else if (outer === undefined) {\n      outer = isBlock ? 1 : inner;\n    }\n    if (inner < outer) {\n      return undefined;\n    }\n    if (outer > axes[grip].length) {\n      return undefined;\n    }\n    let t2 = slices[outer - 1];\n    for (let i = outer + 1; i <= inner; i++) {\n      t2 = Combine(def, t2, slices[i - 1]);\n    }\n    this.moveStash[rep] = t2;\n    return t2;\n  }\n\n  private splitByFaceNames(\n    s: string,\n    facenames: string[],\n  ): string[] | undefined {\n    const r: string[] = [];\n    let at = 0;\n    // we permit lowercase arguments, but face names are always upper case\n    s = s.toUpperCase();\n    while (at < s.length) {\n      let found = false;\n      for (const facename of facenames) {\n        if (s.substr(at).startsWith(facename)) {\n          r.push(facename);\n          at += facename.length;\n          found = true;\n          break;\n        }\n      }\n      if (!found) {\n        return undefined;\n      }\n    }\n    return r;\n  }\n}\n","/**\n *  This module manages canonical sequences.  You can merge sequences\n *  combining moves (fully respecting commuting moves), and you can\n *  generate canonical sequences efficiently.\n */\nimport { KPuzzleDefinition, Transformation } from \"./definition_types\";\nimport {\n  EquivalentTransformations,\n  Combine,\n  IdentityTransformation,\n} from \"./transformations\";\nimport {\n  modifiedBlockMove,\n  blockMoveToString,\n  BlockMove,\n  Sequence,\n} from \"../alg\";\n\nclass InternalMove {\n  constructor(public base: number, public twist: number) {}\n  public getTransformation(canon: Canonicalize): Transformation {\n    return canon.transforms[this.base][this.twist];\n  }\n\n  public asString(canon: Canonicalize): string {\n    const mod = canon.moveorder[this.base];\n    let tw = this.twist % mod;\n    while (tw + tw > mod) {\n      tw -= mod;\n    }\n    while (tw + tw <= -mod) {\n      tw += mod;\n    }\n    const nam = canon.movenames[this.base];\n    if (tw === 1) {\n      return nam;\n    } else if (tw === -1) {\n      return nam + \"'\";\n    } else if (tw > 0) {\n      return nam + tw;\n    } else if (tw < 0) {\n      return nam + -tw + \"'\";\n    } else {\n      throw new Error(\"Stringifying null move?\");\n    }\n  }\n}\n\n// represents puzzle move data and its commuting structure\nexport class Canonicalize {\n  public commutes: boolean[][] = [];\n  public moveorder: number[] = [];\n  public movenames: string[] = [];\n  public transforms: Transformation[][] = [];\n  public moveindex: { [key: string]: number } = {};\n  public baseMoveCount: number;\n  constructor(public def: KPuzzleDefinition) {\n    const basemoves = def.moves;\n    const id = IdentityTransformation(def);\n    for (const mv1 in basemoves) {\n      this.moveindex[mv1] = this.movenames.length;\n      this.movenames.push(mv1);\n      this.transforms.push([id, basemoves[mv1]]);\n    }\n    this.baseMoveCount = this.movenames.length;\n    for (let i = 0; i < this.baseMoveCount; i++) {\n      this.commutes.push([]);\n      const t1 = this.transforms[i][1];\n      for (let j = 0; j < this.baseMoveCount; j++) {\n        const t2 = this.transforms[j][1];\n        const ab = Combine(def, t1, t2);\n        const ba = Combine(def, t2, t1);\n        this.commutes[i][j] = EquivalentTransformations(def, ab, ba);\n      }\n    }\n    for (let i = 0; i < this.baseMoveCount; i++) {\n      const t1 = this.transforms[i][1];\n      let ct = t1;\n      let order = 1;\n      for (let mult = 2; !EquivalentTransformations(def, id, ct); mult++) {\n        order++;\n        ct = Combine(def, ct, t1);\n        this.transforms[i].push(ct);\n      }\n      this.moveorder[i] = order;\n    }\n  }\n\n  public blockMoveToInternalMove(mv: BlockMove): InternalMove {\n    const basemove = modifiedBlockMove(mv, { amount: 1 });\n    const s = blockMoveToString(basemove);\n    if (!(s in this.def.moves)) {\n      throw new Error(\"! move \" + s + \" not in def.\");\n    }\n    const ind = this.moveindex[s];\n    const mod = this.moveorder[ind];\n    let tw = mv.amount % mod;\n    if (tw < 0) {\n      tw = (tw + mod) % mod;\n    }\n    return new InternalMove(ind, tw);\n  }\n\n  // Sequence must be simple sequence of block moves\n  // this one does not attempt to merge.\n  public sequenceToSearchSequence(\n    s: Sequence,\n    tr?: Transformation,\n  ): SearchSequence {\n    const ss = new SearchSequence(this, tr);\n    for (const mv of s.nestedUnits) {\n      ss.appendOneMove(this.blockMoveToInternalMove(mv as BlockMove));\n    }\n    return ss;\n  }\n\n  // Sequence to simple sequence, with merging.\n  public mergeSequenceToSearchSequence(\n    s: Sequence,\n    tr?: Transformation,\n  ): SearchSequence {\n    const ss = new SearchSequence(this, tr);\n    for (const mv of s.nestedUnits) {\n      ss.mergeOneMove(this.blockMoveToInternalMove(mv as BlockMove));\n    }\n    return ss;\n  }\n}\n// represents a single sequence we are working on\n// this can be a search sequence, or it can be a\n// \"cooked\" sequence that we want to use efficiently.\nexport class SearchSequence {\n  public moveseq: InternalMove[] = [];\n  public trans: Transformation;\n  constructor(private canon: Canonicalize, tr?: Transformation) {\n    if (tr) {\n      this.trans = tr;\n    } else {\n      this.trans = IdentityTransformation(canon.def);\n    }\n  }\n\n  /*\n   *  A common use for search sequences is to extend them, but\n   *  sometimes we shouldn't modify the returned one.  This\n   *  method gives you a copy you can do whatever you want with.\n   */\n  public clone(): SearchSequence {\n    const r = new SearchSequence(this.canon, this.trans);\n    r.moveseq = [...this.moveseq];\n    return r;\n  }\n\n  // returns 1 if the move is added, 0 if it is merged, -1 if it cancels a move\n  public mergeOneMove(mv: InternalMove): number {\n    const r = this.onlyMergeOneMove(mv);\n    this.trans = Combine(\n      this.canon.def,\n      this.trans,\n      mv.getTransformation(this.canon),\n    );\n    return r;\n  }\n\n  // does not do merge work; just slaps the new move on\n  public appendOneMove(mv: InternalMove): number {\n    this.moveseq.push(mv);\n    this.trans = Combine(\n      this.canon.def,\n      this.trans,\n      mv.getTransformation(this.canon),\n    );\n    return 1;\n  }\n\n  // pop a move off.\n  public popMove(): number {\n    const mv = this.moveseq.pop();\n    if (!mv) {\n      throw new Error(\"Can't pop an empty sequence\");\n    }\n    this.trans = Combine(\n      this.canon.def,\n      this.trans,\n      this.canon.transforms[mv.base][this.canon.moveorder[mv.base] - mv.twist],\n    );\n    return 1;\n  }\n\n  // do one more twist of the last move\n  public oneMoreTwist(): number {\n    const lastmv = this.moveseq[this.moveseq.length - 1];\n    this.trans = Combine(\n      this.canon.def,\n      this.trans,\n      this.canon.transforms[lastmv.base][1],\n    );\n    this.moveseq[this.moveseq.length - 1] = new InternalMove(\n      lastmv.base,\n      lastmv.twist + 1,\n    );\n    return 0;\n  }\n\n  private onlyMergeOneMove(mv: InternalMove): number {\n    let j = this.moveseq.length - 1;\n    while (j >= 0) {\n      if (mv.base === this.moveseq[j].base) {\n        const mo = this.canon.moveorder[mv.base];\n        let twist = (mv.twist + this.moveseq[j].twist) % mo;\n        if (twist < 0) {\n          twist = (twist + mo) % mo;\n        }\n        if (twist === 0) {\n          // this splice should not be a performance problem because the\n          // typical number of following moves should be small\n          this.moveseq.splice(j, 1);\n          return -1;\n        } else {\n          this.moveseq[j] = new InternalMove(mv.base, twist);\n          return 0;\n        }\n      } else if (this.canon.commutes[mv.base][this.moveseq[j].base]) {\n        j--;\n      } else {\n        break;\n      }\n    }\n    this.moveseq.push(mv);\n    return 1;\n  }\n\n  // returns the length of the merged sequence.\n  public mergeSequence(seq: SearchSequence): number {\n    let r = this.moveseq.length;\n    for (let i = 0; i < seq.moveseq.length; i++) {\n      const mv = seq.moveseq[i];\n      const d = this.onlyMergeOneMove(mv);\n      r += d;\n    }\n    this.trans = Combine(this.canon.def, this.trans, seq.trans);\n    return r;\n  }\n\n  public getSequenceAsString(): string {\n    const r: string[] = [];\n    for (const mv of this.moveseq) {\n      r.push(mv.asString(this.canon));\n    }\n    return r.join(\" \");\n  }\n}\n/*\n *   Iterate through canonical sequences by length.  This version\n *   uses generators.\n */\nexport class CanonicalSequenceIterator {\n  public ss: SearchSequence;\n  public targetLength: number;\n  constructor(public canon: Canonicalize, state?: Transformation) {\n    this.ss = new SearchSequence(canon, state);\n    this.targetLength = 0;\n  }\n\n  public nextState(base: number, canonstate: number[]): null | number[] {\n    const newstate: number[] = [];\n    for (const prevbase of canonstate) {\n      if (prevbase === base) {\n        return null;\n      } else if (!this.canon.commutes[prevbase][base]) {\n        // don't do anything in this case\n      } else if (base < prevbase) {\n        return null;\n      } else {\n        newstate.push(prevbase);\n      }\n    }\n    return newstate;\n  }\n\n  public *genSequence(\n    togo: number,\n    canonstate: number[],\n  ): Generator<SearchSequence, null, void> {\n    if (togo === 0) {\n      yield this.ss;\n    } else {\n      for (let base = 0; base < this.canon.baseMoveCount; base++) {\n        const newstate = this.nextState(base, canonstate);\n        if (newstate) {\n          newstate.push(base);\n          for (let tw = 1; tw < this.canon.moveorder[base]; tw++) {\n            this.ss.appendOneMove(new InternalMove(base, tw));\n            yield* this.genSequence(togo - 1, newstate);\n            this.ss.popMove();\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n  public *generator(): Generator<SearchSequence, SearchSequence, void> {\n    for (let d = 0; ; d++) {\n      yield* this.genSequence(d, []);\n    }\n  }\n\n  public *genSequenceTree(\n    canonstate: number[],\n  ): Generator<SearchSequence, null, number> {\n    const r = yield this.ss;\n    if (r > 0) {\n      return null;\n    }\n    for (let base = 0; base < this.canon.baseMoveCount; base++) {\n      const newstate = this.nextState(base, canonstate);\n      if (newstate) {\n        newstate.push(base);\n        for (let tw = 1; tw < this.canon.moveorder[base]; tw++) {\n          this.ss.appendOneMove(new InternalMove(base, tw));\n          yield* this.genSequenceTree(newstate);\n          this.ss.popMove();\n        }\n      }\n    }\n    return null;\n  }\n}\n","import { KPuzzleDefinition } from \"../definition_types\";\n\n// declare module \"*.svg\";\n\n// TODO: Figure out how to import SVGs directly, in a way that works with all our build systems.\n\n// import cube222JSON from \"./2x2x2.kpuzzle.json\";\nexport const Cube222: KPuzzleDefinition = {} as any;\n// import cube222SVG from \"bundle-text:./svg/2x2x2.kpuzzle.svg\";\nCube222.svg = \"cube222SVG\";\n// Cube222.svg = svgJSON[\"2x2x2.kpuzzle.svg\"];\n\n// import cube333JSON from \"./3x3x3.kpuzzle.json\";\nexport const Cube333: KPuzzleDefinition = {} as any;\n// import cube333SVG from \"bundle-text:./svg/3x3x3.kpuzzle.svg\";\nCube333.svg = \"cube333SVG\";\n// Cube333.svg = svgJSON[\"3x3x3.kpuzzle.svg\"];\n\n// import PyraminxJSON from \"./pyraminx.kpuzzle.json\";\nexport const Pyraminx: KPuzzleDefinition = {} as any;\n// import pyraminxSVG from \"bundle-text:./svg/pyraminx.kpuzzle.svg\";\nPyraminx.svg = \"pyraminxSVG\";\n\n// import square1JSON from \"./sq1-hyperorbit.kpuzzle.json\";\nexport const Square1: KPuzzleDefinition = {} as any;\n// import square1SVG from \"./svg/sq1-hyperorbit.kpuzzle.svg\";\nSquare1.svg = \"square1SVG\";\n\n// import clockJSON from \"./clock.kpuzzle.json\";\nexport const Clock: KPuzzleDefinition = {} as any;\n// import clockSVG from \"bundle-text:./svg/clock.kpuzzle.svg\";\nClock.svg = \"clockSVG\";\n","import { KPuzzleDefinition } from \"./definition_types\";\nimport { Clock, Cube222, Cube333, Pyraminx, Square1 } from \"./definitions\";\n\nexport const Puzzles: { [key: string]: KPuzzleDefinition } = {\n  \"2x2x2\": Cube222,\n  \"3x3x3\": Cube333,\n  \"pyraminx\": Pyraminx,\n  \"sq1\": Square1,\n  \"clock\": Clock,\n};\n","{\n  function fixPermutation(permutation) {\n    return permutation.map(x => x - 1);\n  }\n\n  function fixMoves(def) {\n    for (const moveName in def.moves) {\n      const move = def.moves[moveName] ;\n      for (const orbitName in def.orbits) {\n        const moveOrbit = move[orbitName] ;\n        const oldOrientation = moveOrbit.orientation ;\n        const perm = moveOrbit.permutation ;\n        const newOrientation = new Array(oldOrientation.length) ;\n        for (let i = 0; i < perm.length; i++) {\n          newOrientation[i] = oldOrientation[perm[i]] ;\n        }\n        moveOrbit.orientation = newOrientation ;\n      }\n    }\n    return def;\n  }\n}\n\nstart = def:DEFINITION_FILE { return fixMoves(def); }\n\nIDENTIFIER = characters:([A-Za-z0-9<>]+) { return characters.join(\"\"); }\n// IDENTIFIER = characters:(([1-9][0-9]*)(([1-9][0-9]*)*)?)*(([A-Za-z]+)|(\\<[A-Za-z]+(_[A-Za-z]+)*\\>)) { return characters.join(); }\nSET_IDENTIFIER = first:[A-Za-z] rest:[A-Za-z0-9]* { return [first].concat(rest).join(\"\"); }\nNUMBER = characters:[0-9]+ { return parseInt(characters.join(\"\"), 10); }\nSPACE = \" \"\n\nNAME = \"Name\" SPACE identifier:IDENTIFIER { return identifier; }\n\nORBIT= \"Set\" SPACE set_identifier:SET_IDENTIFIER SPACE num_pieces:NUMBER SPACE num_orientations:NUMBER {\n        return [set_identifier, {numPieces: num_pieces, orientations: num_orientations}];\n       }\n\nORBITS\n  = orbit:ORBIT NEWLINE orbits:ORBITS { orbits[orbit[0]] = orbit[1]; return orbits; }\n  // TODO: Can we make sure orbits are added in order? (Most JS engines preserve map order.)\n  / orbit:ORBIT { const orbits = {}; orbits[orbit[0]] = orbit[1]; return orbits;  }\n\nNEWLINE = \"\\n\"\nNEWLINES = \"\\n\"+\nOPTIONAL_NEWLINES = \"\\n\"*\n\nNUMBERS = num:NUMBER SPACE nums:NUMBERS { return [num].concat(nums); }\n        / num:NUMBER { return [num]; }\n\nPERMUTATION = nums:NUMBERS { return fixPermutation(nums) }\n\nDEFINITION  = set_identifier:SET_IDENTIFIER NEWLINE permutation:PERMUTATION NEWLINE nums:NUMBERS {\n                return [set_identifier, {permutation: permutation, orientation: nums}];\n              }\n              / set_identifier:SET_IDENTIFIER NEWLINE permutation:PERMUTATION   {\n                return [set_identifier, {permutation: permutation, orientation: new Array(permutation.length).fill(0)}];\n              }\n\nDEFINITIONS\n  = definition:DEFINITION NEWLINE definitions:DEFINITIONS { definitions[definition[0]] = definition[1]; return definitions; }\n  / definition:DEFINITION { const definitions = {}; definitions[definition[0]] = definition[1]; return definitions; }\n\nSTART_PIECES = \"Solved\" NEWLINE definitions:DEFINITIONS NEWLINE \"End\" { return definitions; }\n\nMOVE = \"Move\" SPACE identifier:IDENTIFIER NEWLINE definitions:DEFINITIONS NEWLINE \"End\" { return [identifier, definitions]; }\n\nMOVES = move:MOVE NEWLINES moves:MOVES { moves[move[0]] = move[1]; return moves; }\n      / move:MOVE { const moves = {}; moves[move[0]] = move[1]; return moves; }\n\nDEFINITION_FILE = name:NAME NEWLINES orbits:ORBITS NEWLINES start_pieces:START_PIECES NEWLINES moves:MOVES OPTIONAL_NEWLINES {\n                    return {name: name, orbits: orbits, moves: moves, startPieces: start_pieces};\n                  }\n","// Workaround per https://github.com/pegjs/pegjs/pull/481\nimport parser from \"./parser.pegjs\";\nconst { parse } = parser;\nexport { parse };\n","import { KPuzzleDefinition } from \"../definition_types\";\nimport { parse as importedParse } from \"./parser-shim\";\n\nconst parse: (s: string) => KPuzzleDefinition = importedParse;\n\nexport { parse };\n","import { KPuzzleDefinition, Transformation } from \"./definition_types\";\nimport { KPuzzle } from \"./kpuzzle\";\n\nconst xmlns = \"http://www.w3.org/2000/svg\";\n\n// Unique ID mechanism to keep SVG gradient element IDs unique. TODO: Is there\n// something more performant, and that can't be broken by other elements of the\n// page? (And also doesn't break if this library is run in parallel.)\nlet svgCounter = 0;\nfunction nextSVGID(): string {\n  svgCounter += 1;\n  return \"svg\" + svgCounter.toString();\n}\n\nexport class SVG {\n  public element: HTMLElement;\n  public gradientDefs: SVGDefsElement;\n  private originalColors: { [type: string]: string } = {};\n  private gradients: { [type: string]: SVGGradientElement } = {};\n  private svgID: string;\n  constructor(public kPuzzleDefinition: KPuzzleDefinition) {\n    if (!kPuzzleDefinition.svg) {\n      throw new Error(\n        `No SVG definition for puzzle type: ${kPuzzleDefinition.name}`,\n      );\n    }\n\n    this.svgID = nextSVGID();\n\n    this.element = document.createElement(\"div\");\n    this.element.classList.add(\"svg-wrapper\");\n    // TODO: Sanitization.\n    this.element.innerHTML = kPuzzleDefinition.svg;\n\n    const svgElem = this.element.querySelector(\"svg\");\n    if (!svgElem) {\n      throw new Error(\"Could not get SVG element\");\n    }\n    if (xmlns !== svgElem.namespaceURI) {\n      throw new Error(\"Unexpected XML namespace\");\n    }\n    svgElem.style.maxWidth = \"100%\";\n    svgElem.style.maxHeight = \"100%\";\n    this.gradientDefs = document.createElementNS(\n      xmlns,\n      \"defs\",\n    ) as SVGDefsElement;\n    svgElem.insertBefore(this.gradientDefs, svgElem.firstChild);\n\n    for (const orbitName in kPuzzleDefinition.orbits) {\n      const orbitDefinition = kPuzzleDefinition.orbits[orbitName];\n\n      for (let idx = 0; idx < orbitDefinition.numPieces; idx++) {\n        for (\n          let orientation = 0;\n          orientation < orbitDefinition.orientations;\n          orientation++\n        ) {\n          const id = this.elementID(orbitName, idx, orientation);\n          const elem = this.elementByID(id);\n          const originalColor = elem.style.fill as string;\n          this.originalColors[id] = originalColor;\n          this.gradients[id] = this.newGradient(id, originalColor);\n          this.gradientDefs.appendChild(this.gradients[id]);\n          elem.setAttribute(\"style\", `fill: url(#grad-${this.svgID}-${id})`);\n        }\n      }\n    }\n  }\n\n  public drawKPuzzle(\n    kpuzzle: KPuzzle,\n    nextState?: Transformation,\n    fraction?: number,\n  ): void {\n    this.draw(kpuzzle.definition, kpuzzle.state, nextState, fraction);\n  }\n\n  // TODO: save definition in the constructor?\n  public draw(\n    definition: KPuzzleDefinition,\n    state: Transformation,\n    nextState?: Transformation,\n    fraction?: number,\n  ): void {\n    for (const orbitName in definition.orbits) {\n      const orbitDefinition = definition.orbits[orbitName];\n\n      const curOrbitState = state[orbitName];\n      const nextOrbitState = nextState\n        ? (nextState as Transformation)[orbitName]\n        : null;\n      for (let idx = 0; idx < orbitDefinition.numPieces; idx++) {\n        for (\n          let orientation = 0;\n          orientation < orbitDefinition.orientations;\n          orientation++\n        ) {\n          const id = this.elementID(orbitName, idx, orientation);\n          const fromCur = this.elementID(\n            orbitName,\n            curOrbitState.permutation[idx],\n            (orbitDefinition.orientations -\n              curOrbitState.orientation[idx] +\n              orientation) %\n              orbitDefinition.orientations,\n          );\n          let singleColor = false;\n          if (nextOrbitState) {\n            const fromNext = this.elementID(\n              orbitName,\n              nextOrbitState.permutation[idx],\n              (orbitDefinition.orientations -\n                nextOrbitState.orientation[idx] +\n                orientation) %\n                orbitDefinition.orientations,\n            );\n            if (fromCur === fromNext) {\n              singleColor = true; // TODO: Avoid redundant work during move.\n            }\n            fraction = fraction || 0; // TODO Use the type system to tie this to nextState?\n            const easedBackwardsPercent =\n              100 * (1 - fraction * fraction * (2 - fraction * fraction)); // TODO: Move easing up the stack.\n            this.gradients[id].children[0].setAttribute(\n              \"stop-color\",\n              this.originalColors[fromCur],\n            );\n            this.gradients[id].children[1].setAttribute(\n              \"stop-color\",\n              this.originalColors[fromCur],\n            );\n            this.gradients[id].children[1].setAttribute(\n              \"offset\",\n              `${Math.max(easedBackwardsPercent - 5, 0)}%`,\n            );\n            this.gradients[id].children[2].setAttribute(\n              \"offset\",\n              `${Math.max(easedBackwardsPercent - 5, 0)}%`,\n            );\n            this.gradients[id].children[3].setAttribute(\n              \"offset\",\n              `${easedBackwardsPercent}%`,\n            );\n            this.gradients[id].children[4].setAttribute(\n              \"offset\",\n              `${easedBackwardsPercent}%`,\n            );\n            this.gradients[id].children[4].setAttribute(\n              \"stop-color\",\n              this.originalColors[fromNext],\n            );\n            this.gradients[id].children[5].setAttribute(\n              \"stop-color\",\n              this.originalColors[fromNext],\n            );\n          } else {\n            singleColor = true; // TODO: Avoid redundant work during move.\n          }\n          if (singleColor) {\n            this.gradients[id].children[0].setAttribute(\n              \"stop-color\",\n              this.originalColors[fromCur],\n            );\n            this.gradients[id].children[1].setAttribute(\n              \"stop-color\",\n              this.originalColors[fromCur],\n            );\n            this.gradients[id].children[1].setAttribute(\"offset\", `100%`);\n            this.gradients[id].children[2].setAttribute(\"offset\", `100%`);\n            this.gradients[id].children[3].setAttribute(\"offset\", `100%`);\n            this.gradients[id].children[4].setAttribute(\"offset\", `100%`);\n          }\n          // this.gradients[id]\n          // this.elementByID(id).style.fill = this.originalColors[from];\n        }\n      }\n    }\n  }\n\n  private newGradient(id: string, originalColor: string): SVGGradientElement {\n    const grad = document.createElementNS(\n      xmlns,\n      \"radialGradient\",\n    ) as SVGGradientElement;\n    grad.setAttribute(\"id\", `grad-${this.svgID}-${id}`);\n    grad.setAttribute(\"r\", `70.7107%`); // TODO: Adapt to puzzle.\n    const stopDefs = [\n      { offset: 0, color: originalColor },\n      { offset: 0, color: originalColor },\n      { offset: 0, color: \"black\" },\n      { offset: 0, color: \"black\" },\n      { offset: 0, color: originalColor },\n      { offset: 100, color: originalColor },\n    ];\n    for (const stopDef of stopDefs) {\n      const stop = document.createElementNS(xmlns, \"stop\") as SVGStopElement;\n      stop.setAttribute(\"offset\", `${stopDef.offset}%`);\n      stop.setAttribute(\"stop-color\", stopDef.color);\n      stop.setAttribute(\"stop-opacity\", \"1\");\n      grad.appendChild(stop);\n    }\n    return grad;\n  }\n\n  private elementID(\n    orbitName: string,\n    idx: number,\n    orientation: number,\n  ): string {\n    return orbitName + \"-l\" + idx + \"-o\" + orientation;\n  }\n\n  private elementByID(id: string): HTMLElement {\n    // TODO: Use classes and scope selector to SVG element.\n    return this.element.querySelector(\"#\" + id) as HTMLElement;\n  }\n}\n"],"names":["$e1c3be66538e0deac6a7615315cb999d$var$_definition_types","a","t","matchesAlgType","$eba7976f41dde578104f699419088b8$exports","reportTypeMismatch","type","msg","currentReportingLevel","Error","numWarned","console","warn","level","AlgPart","[object Object]","$a8aeaf65ee84c206da41445ce65$var$_defineProperty","this","assertIsUnit","Unit","Move","Annotation","Container","constructor","nestedUnits","super","n","Object","freeze","nestedSequence","amount","A","B","comment","family","BlockMove","undefined","innerLayer","outerLayer","$ed5f099a2259964cccc8ff38ad98fb$var$_defineProperty","s","newMove","coalesceLastMove","mod","oldNestedUnits","oldLastMove","length","m2","m1","newNestedUnits","slice","newAmount","push","modifiedBlockMove","Sequence","args","Array","prototype","concat","apply","map","original","modifications","_modifications$outerL","_modifications$innerL","_modifications$family","_modifications$amount","move","algPartToStringForTesting","dispatch","algPart","dataDown","$a8aeaf65ee84c206da41445ce65$exports","assertMatchesType","traverseSequence","traverseGroup","traverseBlockMove","traverseCommutator","traverseConjugate","traversePause","traverseNewLine","traverseComment","TraversalDownUp","traverse","traverseIntoUnit","TraversalUp","Invert","sequence","reverse","group","Group","blockMove","commutator","Commutator","conjugate","Conjugate","pause","newLine","Expand","flattenSequenceOneLevel","repeat","expandedA","expandedB","once","invert","algList","flattened","part","isUnit","accordingTo","Math","abs","repeated","i","StructureEquals","dataDownSeq","_pause","_newLine","CoalesceBaseMoves","coalesced","last","sameBlock","pop","moveA","moveB","repetitionSuffix","absAmount","String","blockMoveToString","out","ToString","output","spaceBetween","u1","u2","invertInstance","expandInstance","structureEqualsInstance","coalesceBaseMovesInstance","algToStringInstance","bind","fromJSON","json","j","Pause","NewLine","Comment","unitFromJSON","parse","validators","validateSiGNAlg","validateSiGNMoves","validateFlatAlg","ValidationError","ValidatorTraversal","validateFamily","allowedFamilyLists","list","plainMoveFamilies","x","y","z","M","E","S","m","e","singleSliceMoveFamilies","U","L","F","R","D","wideMoveFamilies","u","l","f","r","b","d","Uw","Lw","Fw","Rw","Bw","Dw","BaseMoveValidator","unit","_comment","BlockMoveValidator","FlatAlgValidator","_group","_blockMove","_commutator","_conjugate","BlockMoveValidatorInstance","flatAlgValidatorInstance","peg$SyntaxError","message","expected","found","location","name","captureStackTrace","child","parent","ctor","peg$subclass","buildMessage","DESCRIBE_EXPECTATION_FNS","literal","expectation","literalEscape","text","class","escapedParts","parts","classEscape","inverted","any","end","other","description","hex","ch","charCodeAt","toString","toUpperCase","replace","descriptions","sort","join","describeExpected","describeFound","$d8b0c8918f3dd5818588d12ebbdfd6$var$_parser","SyntaxError","input","options","peg$result","peg$FAILED","peg$startRuleFunctions","start","peg$parsestart","peg$startRuleFunction","peg$c0","peg$c1","peg$classExpectation","peg$c4","peg$literalExpectation","peg$c7","peg$c8","peg$c13","peg$c16","peg$c17","peg$c18","peg$c20","peg$c23","peg$c25","peg$c30","peg$c31","peg$c32","peg$c34","peg$c35","peg$c38","peg$c42","peg$c43","peg$currPos","peg$posDetailsCache","line","column","peg$maxFailPos","peg$maxFailExpected","startRule","ignoreCase","peg$computePosDetails","pos","p","details","peg$computeLocation","startPos","endPos","startPosDetails","endPosDetails","offset","peg$fail","peg$buildStructuredError","peg$parseSEQUENCE","peg$parseNUMBER","s0","s1","s2","test","charAt","parseInt","peg$parseFAMILY","peg$parseREPEATABLE_UNIT","s3","s4","s5","peg$c11","peg$c14","peg$parseBLOCK_MOVE","peg$parseREPEATED_UNIT","repeatable_unit","peg$parseAMOUNT","peg$c28","peg$parseANNOTATION","substr","peg$parseCOMMENT","peg$parseSEGMENT_PART","peg$parseSEGMENT","segment_part","peg$c41","peg$parseUNIT_LIST","unit_list","parser","algo","$b1714a921ed3578bb0b7aebebb5c95$exports","$d8b0c8918f3dd5818588d12ebbdfd6$exports","validate","altKey","ctrlKey","cubeKeyMapping","keyCode","73","$c954828eab0f3155db4d17af85637$exports","BareBlockMove","75","87","79","83","76","68","69","74","70","72","71","78","67","82","85","77","88","188","84","89","66","186","59","65","80","81","90","190","deserializeURLParam","URLSearchParams","window","search","get","url","URL","alg","searchParams","set","serializeURLParam","setup","title","puzzle","includes","stage","view","escaped","$e0033444fb3cf6c0f42fca012199$exports","algToString","unescaped","$d5988ab02e5d3d6ca3b6b7a594c3ea6$exports","Multiply","def","IdentityTransformation","halfish","floor","twiceHalfish","Combine","orbitName","orbits","oDef","o","numPieces","idx","w","om","pm","orientation","permutation","orientations","gcd","t1","t2","EquivalentTransformations","startPieces","newTrans","o1","o2","newPerm","newOri","definition","transformation","orbitDefinition","newPermutation","newOrientation","orbitTransformation","fromIdx","stateForBlockMove","repMoveString","$b990a82770d51c762a0a9d626e26b5$exports","moves","KPuzzle","expandSlices","$a466f214e89192eed4a911d6$exports","$d1165c3eb6ab401442a4e142b7$var$_defineProperty","gripStash","moveStash","regrip","setFaceNames","fn","facenames","addGrip","grip1","grip2","nslices","slices","axes","aprime","_","expandSlicesByName","mv","signmove","unswizzle","grip","faceSplit","splitByFaceNames","testGrip","rep","isBlock","isPuzzle","endsWith","substring","outer","inner","at","facename","startsWith","$ce5cbc51b429843d5d40daff690feb$var$_defineProperty","state","reset","serialize","applyBlockMove","applyAlg","expand","applyMove","moveName","getMoveExpander","create","moveExpander","MoveExpander","faceNames","me","InternalMove","base","twist","getTransformation","canon","transforms","asString","moveorder","tw","nam","movenames","$d1fc1d9b30a8a21f20a3a63$var$_defineProperty","basemoves","id","mv1","moveindex","baseMoveCount","commutes","ab","ba","ct","order","mult","blockMoveToInternalMove","basemove","ind","sequenceToSearchSequence","tr","ss","SearchSequence","appendOneMove","mergeSequenceToSearchSequence","mergeOneMove","trans","clone","moveseq","onlyMergeOneMove","popMove","oneMoreTwist","lastmv","mo","splice","mergeSequence","seq","getSequenceAsString","targetLength","nextState","canonstate","newstate","prevbase","togo","genSequence","genSequenceTree","Cube222","svg","Cube333","Pyraminx","Square1","Clock","2x2x2","3x3x3","pyraminx","sq1","clock","$d04e88dde8a6e42fc5999ccad73891$var$_parser","$d04e88dde8a6e42fc5999ccad73891$var$_interopRequireDefault","moveOrbit","oldOrientation","perm","fixMoves","peg$c2","peg$c5","peg$c6","peg$c9","peg$c10","peg$c15","peg$c37","s7","peg$parseSPACE","peg$parseIDENTIFIER","peg$parseNAME","peg$parseNEWLINES","peg$parseORBITS","peg$parseORBIT","peg$parseNEWLINE","orbit","peg$c21","peg$parseDEFINITIONS","peg$parseSTART_PIECES","peg$parseMOVES","peg$parseMOVE","peg$c40","peg$parseOPTIONAL_NEWLINES","peg$parseDEFINITION_FILE","peg$parseSET_IDENTIFIER","peg$parseNUMBERS","num","peg$parsePERMUTATION","peg$parseDEFINITION","set_identifier","fill","definitions","importedParse","svgCounter","kPuzzleDefinition","$bb2eba5d3d9d8409ed259f4ccb8eacd2$var$_defineProperty","svgID","element","document","createElement","classList","add","innerHTML","svgElem","querySelector","namespaceURI","style","maxWidth","maxHeight","gradientDefs","createElementNS","insertBefore","firstChild","elementID","elem","elementByID","originalColor","originalColors","gradients","newGradient","appendChild","setAttribute","drawKPuzzle","kpuzzle","fraction","draw","curOrbitState","nextOrbitState","fromCur","singleColor","fromNext","easedBackwardsPercent","children","max","grad","stopDefs","color","stopDef","stop"],"version":3,"file":"index.js.map"}